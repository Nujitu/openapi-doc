# Generated with gnostic protoc-gen-openapi
{
  openapi: 3.0.3,
  info:
    {
      title: Authentication Domain,
      description: "Skoola Admin User Service, Skoola Permission Service, Skoola Auth Service, Skoola Identity Service",
      version: v1,
    },
  servers:
    [
      { url: "https://staging-api.simbiosa.co.id" },
      { url: "http://localhost:8080" },
    ],
  paths:
    {
      /v1/user/admin:
        {
          post:
            {
              tags: [AdminUserService],
              summary: Register new user,
              description: Admin register a new user,
              operationId: AdminUserService_RegisterUser,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicRegisterUserRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicRegisterUserResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/permission:
        {
          get:
            {
              tags: [PermissionService],
              summary: List Permissions,
              description: List all permissions available for the authenticated user.,
              operationId: PermissionService_ListPermission,
              parameters:
                [
                  { name: name, in: query, schema: { type: string } },
                  {
                    name: role_type,
                    in: query,
                    schema:
                      {
                        enum:
                          [
                            UNSPECIFIED,
                            STUDENT,
                            PARENT,
                            TEACHER,
                            STAFF,
                            ADMINISTRATOR,
                            SUPERADMINISTRATOR,
                          ],
                        type: string,
                        format: enum,
                      },
                  },
                  {
                    name: limit,
                    in: query,
                    schema: { type: integer, format: int32 },
                  },
                  {
                    name: offset,
                    in: query,
                    schema: { type: integer, format: int32 },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicListPermissionResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
          post:
            {
              tags: [PermissionService],
              summary: Create Permission,
              description: Create a new permission for the authenticated user.,
              operationId: PermissionService_CreatePermission,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicCreatePermissionRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicCreatePermissionResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/permission/assign:
        {
          post:
            {
              tags: [PermissionService],
              summary: Assign Permission,
              description: Assign a permission to a user or role.,
              operationId: PermissionService_AssignPermission,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicAssignUserPermissionRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicAssignUserPermissionResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/permission/revoke:
        {
          post:
            {
              tags: [PermissionService],
              summary: Revoke Permission,
              description: Revoke a permission from a user or role.,
              operationId: PermissionService_RevokePermission,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicRevokePermissionRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicRevokePermissionResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/permission/user/{user_id}":
        {
          get:
            {
              tags: [PermissionService],
              summary: Get User Permissions,
              description: Retrieve all permissions assigned to a specific user.,
              operationId: PermissionService_GetUserPermissions,
              parameters:
                [
                  {
                    name: user_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetUserPermissionsResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/permission/{id}":
        {
          get:
            {
              tags: [PermissionService],
              summary: Get Permission,
              description: Retrieve details of a specific permission by ID.,
              operationId: PermissionService_GetPermission,
              parameters:
                [
                  {
                    name: id,
                    in: path,
                    description: id of permission,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetPermissionResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
          delete:
            {
              tags: [PermissionService],
              summary: Delete Permission,
              description: Delete a permission for the authenticated user.,
              operationId: PermissionService_DeletePermission,
              parameters:
                [
                  {
                    name: id,
                    in: path,
                    description: id of permission,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicDeletePermissionResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
          patch:
            {
              tags: [PermissionService],
              summary: Update Permission,
              description: Update an existing permission for the authenticated user.,
              operationId: PermissionService_UpdatePermission,
              parameters:
                [
                  {
                    name: id,
                    in: path,
                    description: id of permission,
                    required: true,
                    schema: { type: string },
                  },
                ],
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicUpdatePermissionRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicUpdatePermissionResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/auth/force_reset_password:
        {
          post:
            {
              tags: [AuthService],
              summary: Reset Password,
              description: Reset user password without email confirmatioin,
              operationId: AuthService_ForceResetPassword,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicForceResetPasswordRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicForceResetPasswordResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/auth/login:
        {
          post:
            {
              tags: [AuthService],
              summary: Logging in User by supported Authentication Factor,
              description: "Logging in User by supported Authentication Factor, 'password' for password login flow and 'otp_key' for passwordless login flow.",
              operationId: AuthService_Login,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicLoginRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicLoginResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/auth/logout:
        {
          post:
            {
              tags: [AuthService],
              summary: Logging out User,
              description: Logging out User by invalidating provided access token. Only client that use the provided token will be logged out.,
              operationId: AuthService_Logout,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicLogoutRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicLogoutResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/auth/refresh:
        {
          post:
            {
              tags: [AuthService],
              summary: Refresh Expired Token,
              description: Extending user expired token,
              operationId: AuthService_RefreshToken,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicRefreshTokenRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicRefreshTokenResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/auth/register_parent:
        {
          post:
            {
              tags: [AuthService],
              summary: Register Parent User,
              description: register new parent user.,
              operationId: AuthService_RegisterParent,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicRegisterParentRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicRegisterParentResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/auth/reset_password:
        {
          post:
            {
              tags: [AuthService],
              summary: Reset Password,
              description: Reset user password,
              operationId: AuthService_ResetPassword,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicResetPasswordRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicResetPasswordResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/identity/register:
        {
          post:
            {
              tags: [IdentityService],
              summary: Register New User,
              description: register new user.,
              operationId: IdentityService_Register,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicRegisterRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicRegisterResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
    },
  "components":
    {
      "schemas":
        {
          v1AttachmentFile:
            {
              type: object,
              properties:
                {
                  display_name: { type: string },
                  unique_name: { type: string },
                  file_extension: { type: string },
                  file_size: { type: string },
                  link: { type: string },
                },
            },
          publicRegisterUserRequest:
            {
              type: object,
              properties:
                {
                  fullname:
                    {
                      example: John F. Doe,
                      type: string,
                      description: User full name,
                    },
                  phone_number:
                    {
                      example: +628790909321,
                      type: string,
                      description: User phone number,
                    },
                  username: { type: string, description: Username },
                  email:
                    {
                      example: john.fd@gmail.com,
                      type: string,
                      description: User email,
                    },
                  register_as:
                    {
                      example: student,
                      enum:
                        [
                          UNSPECIFIED,
                          STUDENT,
                          PARENT,
                          TEACHER,
                          STAFF,
                          ADMINISTRATOR,
                          SUPERADMINISTRATOR,
                        ],
                      type: string,
                      description: registered user role,
                      format: enum,
                    },
                  instance_id:
                    {
                      example: 123455,
                      type: string,
                      description: registered user instance,
                    },
                  nisn:
                    {
                      example: 123455,
                      type: string,
                      description: required if user is student,
                    },
                  nip:
                    {
                      example: 123455,
                      type: string,
                      description: required if user is teacher,
                    },
                  password: { type: string, description: User Password },
                },
              description: Request body of Register new user,
            },
          publicRegisterUserResponse:
            {
              type: object,
              properties:
                {
                  user:
                    {
                      $ref: "#/components/schemas/sharedUser",
                    },
                },
            },
          sharedUser:
            {
              type: object,
              properties:
                {
                  id: { example: 123, type: string, description: User ID },
                  fullname:
                    {
                      example: John F. Doe,
                      type: string,
                      description: User full name,
                    },
                  username:
                    {
                      example: JohnFD,
                      type: string,
                      description: User username,
                    },
                  phone_number:
                    {
                      example: +628790909321,
                      type: string,
                      description: User phone number,
                    },
                  email:
                    {
                      example: john.fd@gmail.com,
                      type: string,
                      description: User email,
                    },
                  profile_pic:
                    {
                      example: profile.png,
                      type: string,
                      description: User profile pict name,
                    },
                  address:
                    {
                      example: jln jln,
                      type: string,
                      description: User address,
                    },
                  gender:
                    {
                      example: Male,
                      enum: [GENDER_UNSPECIFIED, MALE, FEMALE],
                      type: string,
                      description: User gender,
                      format: enum,
                    },
                  date_of_birth:
                    {
                      example: 2020-01-01,
                      type: string,
                      description: User Date of Birth,
                      format: date-time,
                    },
                  place_of_birth:
                    {
                      example: Jakarta,
                      type: string,
                      description: User Place of Birth,
                    },
                  role_type:
                    {
                      enum:
                        [
                          UNSPECIFIED,
                          STUDENT,
                          PARENT,
                          TEACHER,
                          STAFF,
                          ADMINISTRATOR,
                          SUPERADMINISTRATOR,
                        ],
                      type: string,
                      format: enum,
                    },
                  status:
                    {
                      enum:
                        [
                          USER_STATUS_UNSPECIFIED,
                          USER_STATUS_ACTIVE,
                          USER_STATUS_INACTIVE,
                        ],
                      type: string,
                      description: Represent user status,
                      format: enum,
                    },
                  profile_picture:
                    { $ref: "#/components/schemas/v1AttachmentFile" },
                  created_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when user is created,
                      format: date-time,
                    },
                  updated_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when user data updated,
                      format: date-time,
                    },
                },
              description: User entity,
            },
          "v1ErrorResponse":
            {
              "type": "object",
              "properties":
                {
                  "errors":
                    {
                      "title": "errors",
                      "type": "array",
                      "items":
                        { "$ref": "#/components/schemas/v1ErrorInfo" },
                    },
                },
            },
          "v1ErrorInfo":
            {
              "type": "object",
              "properties":
                {
                  "message": { "title": "message", "type": "string" },
                  "code": { "title": "code", "type": "string" },
                  "field": { "title": "field", "type": "string" },
                  "info": { "title": "info", "type": "string" },
                },
            },
          v1CursorPagination:
            {
              type: object,
              properties:
                {
                  limit: { type: integer, format: uint32 },
                  next_cursor: { type: string },
                  prev_cursor: { type: string },
                  curr_cursor: { type: string },
                },
            },
          v1OffsetPagination:
            {
              type: object,
              properties:
                {
                  limit: { type: integer, format: uint32 },
                  offset: { type: integer, format: uint32 },
                  total: { type: integer, format: uint32 },
                },
            },
          v1ResponseMetadata:
            {
              type: object,
              properties:
                {
                  offset_pagination:
                    { $ref: "#/components/schemas/v1OffsetPagination" },
                  cursor_pagination:
                    { $ref: "#/components/schemas/v1CursorPagination" },
                },
            },
          publicAssignUserPermissionRequest:
            {
              type: object,
              properties:
                {
                  user_id: { type: string, description: id of user },
                  permission_ids:
                    {
                      type: array,
                      items: { type: string },
                      description: id of rule to be assigned,
                    },
                },
              description: Request body of AssignPermission,
            },
          publicAssignUserPermissionResponse:
            {
              type: object,
              properties:
                {
                  message:
                    {
                      type: string,
                      description: message if permission is assigned to user,
                    },
                },
              description: Response body of AssignUserPermission,
            },
          publicCreatePermissionRequest:
            {
              type: object,
              properties:
                {
                  action: { type: string, description: action },
                  permission_name: { type: string, description: resource name },
                  description: { type: string, description: display name },
                  role_type:
                    {
                      enum:
                        [
                          UNSPECIFIED,
                          STUDENT,
                          PARENT,
                          TEACHER,
                          STAFF,
                          ADMINISTRATOR,
                          SUPERADMINISTRATOR,
                        ],
                      type: string,
                      format: enum,
                    },
                },
              description: Request body of CreatePermission,
            },
          publicCreatePermissionResponse:
            {
              type: object,
              properties:
                {
                  message: { type: string, description: additional message },
                  permission:
                    {
                      allOf:
                        [
                          {
                            $ref: "#/components/schemas/sharedPermission",
                          },
                        ],
                      description: created permission data,
                    },
                },
              description: Response body of CreatePermission,
            },
          publicDeletePermissionResponse:
            {
              type: object,
              properties:
                {
                  message:
                    {
                      type: string,
                      description: message if permission is successfully deleted from permission,
                    },
                },
              description: Response body of DeletePermission,
            },
          publicGetPermissionResponse:
            {
              type: object,
              properties:
                {
                  permission:
                    {
                      allOf:
                        [
                          {
                            $ref: "#/components/schemas/sharedPermission",
                          },
                        ],
                      description: permission data,
                    },
                },
            },
          publicGetUserPermissionsResponse:
            {
              type: object,
              properties:
                {
                  user_permissions:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedPermission",
                        },
                      description: List of permissions assigned to the user,
                    },
                  meta:
                    {
                      allOf:
                        [
                          {
                            $ref: "#/components/schemas/v1ResponseMetadata",
                          },
                        ],
                      description: Metadata about the response,
                    },
                },
            },
          publicListPermissionResponse:
            {
              type: object,
              properties:
                {
                  permission:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedPermission",
                        },
                      description: permission data,
                    },
                  meta:
                    {
                      allOf:
                        [
                          {
                            $ref: "#/components/schemas/v1ResponseMetadata",
                          },
                        ],
                      description: metadata,
                    },
                },
              description: Response body of ListPermission,
            },
          publicRevokePermissionRequest:
            {
              type: object,
              properties:
                {
                  user_id:
                    {
                      example: user-id-12345,
                      type: string,
                      description: ID of the user from whom the permission will be revoked,
                    },
                  permission_id:
                    {
                      example: permission-id-12345,
                      type: string,
                      description: ID of the permission to be revoked,
                    },
                },
            },
          publicRevokePermissionResponse:
            {
              type: object,
              properties:
                {
                  message:
                    {
                      type: string,
                      description: Message indicating the result of the revoke operation,
                    },
                },
            },
          publicUpdatePermissionRequest:
            {
              type: object,
              properties:
                {
                  id:
                    {
                      example: permission-id-12345,
                      type: string,
                      description: ID of the permission to update,
                    },
                  action: { type: string, description: action },
                  permission_name: { type: string, description: resource name },
                  description: { type: string, description: display name },
                  role_type:
                    {
                      enum:
                        [
                          UNSPECIFIED,
                          STUDENT,
                          PARENT,
                          TEACHER,
                          STAFF,
                          ADMINISTRATOR,
                          SUPERADMINISTRATOR,
                        ],
                      type: string,
                      format: enum,
                    },
                },
            },
          publicUpdatePermissionResponse:
            {
              type: object,
              properties:
                {
                  message:
                    {
                      type: string,
                      description: Message indicating the result of the update operation,
                    },
                  permission:
                    {
                      allOf:
                        [
                          {
                            $ref: "#/components/schemas/sharedPermission",
                          },
                        ],
                      description: Updated permission data,
                    },
                },
              description: Response body of UpdatePermission,
            },
          sharedPermission:
            {
              type: object,
              properties:
                {
                  id: { type: string, description: id },
                  action: { type: string, description: action },
                  permission_name: { type: string, description: resource name },
                  description: { type: string, description: display name },
                  created_at:
                    {
                      type: string,
                      description: when permission is created,
                      format: date-time,
                    },
                  updated_at:
                    {
                      type: string,
                      description: when permission is updated,
                      format: date-time,
                    },
                },
              description: Permission entity,
            },
          publicForceResetPasswordRequest:
            {
              type: object,
              properties:
                {
                  new_password: { type: string, description: New Password },
                  current_password:
                    { type: string, description: User Password },
                },
            },
          publicForceResetPasswordResponse:
            {
              type: object,
              properties:
                {
                  message:
                    { type: string, description: additional information },
                },
            },
          publicLoginRequest:
            {
              type: object,
              properties:
                {
                  email:
                    {
                      example: john.fd@gmail.com,
                      type: string,
                      description: User email,
                    },
                  password: { type: string, description: User Password },
                },
            },
          publicLoginResponse:
            {
              type: object,
              properties:
                {
                  message:
                    { type: string, description: additional information },
                  login_entity:
                    {
                      $ref: "#/components/schemas/sharedLoginEntity",
                    },
                  redirect_to:
                    {
                      type: string,
                      description: url redirection when login is success or fail,
                    },
                },
              description: Response body of Login,
            },
          publicLogoutRequest:
            {
              type: object,
              properties:
                {
                  user_access_token:
                    {
                      type: string,
                      description: access token of user to be invalidated,
                    },
                },
              description: Request body of Logout,
            },
          publicLogoutResponse:
            {
              type: object,
              properties:
                {
                  message:
                    { type: string, description: message if logout is success },
                },
              description: Response body of Logout,
            },
          publicRefreshTokenRequest:
            {
              type: object,
              properties:
                {
                  user_access_token:
                    {
                      type: string,
                      description: access token of user to be invalidated,
                    },
                },
            },
          publicRefreshTokenResponse:
            {
              type: object,
              properties:
                {
                  user_access_token:
                    {
                      type: string,
                      description: new access token for the user,
                    },
                  refresh_token:
                    {
                      type: string,
                      description: new refresh token for the user,
                    },
                },
            },
          publicRegisterParentRequest:
            {
              type: object,
              properties:
                {
                  fullname:
                    {
                      example: John F. Doe,
                      type: string,
                      description: User full name,
                    },
                  phone_number:
                    {
                      example: +628790909321,
                      type: string,
                      description: User phone number,
                    },
                  username: { type: string, description: Username },
                  email:
                    {
                      example: john.fd@gmail.com,
                      type: string,
                      description: User email,
                    },
                  password: { type: string, description: User Password },
                  relation_role_id:
                    {
                      example: role-id-12345,
                      type: string,
                      description: Role ID of the user/student,
                    },
                },
            },
          publicRegisterParentResponse:
            {
              type: object,
              properties:
                {
                  message:
                    { type: string, description: additional information },
                  login_entity:
                    {
                      $ref: "#/components/schemas/sharedLoginEntity",
                    },
                  redirect_to:
                    {
                      type: string,
                      description: url redirection when login is success or fail,
                    },
                },
            },
          publicResetPasswordRequest:
            {
              type: object,
              properties:
                {
                  key: { type: string, description: a key received from email },
                  new_password:
                    { type: string, description: User new Password },
                },
            },
          publicResetPasswordResponse:
            {
              type: object,
              properties:
                {
                  message:
                    { type: string, description: additional information },
                },
            },
          sharedLoginEntity:
            {
              type: object,
              properties:
                {
                  user:
                    {
                      allOf:
                        [
                          {
                            $ref: "#/components/schemas/sharedUser",
                          },
                        ],
                      description: user data,
                    },
                  session_token: { type: string, description: session token },
                  refresh_token: { type: string },
                },
              description: Login entity,
            },
          publicRegisterRequest:
            {
              type: object,
              properties:
                {
                  fullname:
                    {
                      example: John F. Doe,
                      type: string,
                      description: User full name,
                    },
                  phone_number:
                    {
                      example: +628790909321,
                      type: string,
                      description: User phone number,
                    },
                  username: { type: string, description: Username },
                  email:
                    {
                      example: john.fd@gmail.com,
                      type: string,
                      description: User email,
                    },
                  password: { type: string, description: User Password },
                  login_challenge:
                    {
                      type: string,
                      description: " login challenge from auth-server",
                    },
                },
              description: Request body of Register new user,
            },
          publicRegisterResponse:
            {
              type: object,
              properties:
                {
                  message: { type: string, description: additional message },
                  user:
                    {
                      $ref: "#/components/schemas/sharedUser",
                    },
                  token:
                    {
                      type: string,
                      description: generated token after registered,
                    },
                  refresh_token:
                    { type: string, description: refresh token for the user },
                },
              description: Response body of Register new user,
            },
        },
      responses:
        {
          "500":
            {
              description: Internal Server Error,
              content:
                {
                  application/json:
                    {
                      schema:
                        {
                          $ref: "#/components/schemas/v1ErrorResponse",
                        },
                    },
                },
            },
          "401":
            {
              description: Unauthorized JWT token.,
              content:
                {
                  application/json:
                    {
                      schema:
                        {
                          $ref: "#/components/schemas/v1ErrorResponse",
                        },
                    },
                },
            },
        },
      securitySchemes:
        { OAuth2: { type: http, scheme: bearer, bearerFormat: JWT } },
    },
  security: [{ OAuth2: [USER] }],
}
