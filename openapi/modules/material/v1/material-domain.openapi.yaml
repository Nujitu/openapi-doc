# Generated with gnostic protoc-gen-openapi
{
  openapi: 3.0.3,
  info:
    {
      title: Material Domain,
      description: "Skola Subject Service, Skola Class Group Service, Skoola Curriculum Service",
      version: v1,
    },
  servers: [{ url: "https://api.stg.skola.com" }],
  paths:
    {
      /v1/subject:
        {
          post:
            {
              tags: [SubjectService],
              summary: Create a new Subject,
              description: Teacher add new Subject,
              operationId: SubjectService_CreateSubject,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicCreateSubjectRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/sharedSubject",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
          patch:
            {
              tags: [SubjectService],
              summary: Create a new Subject,
              description: Teacher add new Subject,
              operationId: SubjectService_UpdateSubject,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicUpdateSubjectRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/sharedSubject",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/subject/list:
        {
          get:
            {
              tags: [SubjectService],
              summary: Get subject list,
              description: Return list of subjects,
              operationId: SubjectService_GetSubjectList,
              parameters:
                [
                  { name: id, in: query, schema: { type: string } },
                  { name: teacher_id, in: query, schema: { type: string } },
                  { name: grade_level, in: query, schema: { type: string } },
                  {
                    name: major,
                    in: query,
                    schema: { type: array, items: { type: string } },
                  },
                  { name: name, in: query, schema: { type: string } },
                  { name: subject_code, in: query, schema: { type: string } },
                  {
                    name: subject_type,
                    in: query,
                    schema:
                      {
                        enum:
                          [SUBJECT_GENERAL, SUBJECT_MAJOR, SUBJECT_SELECTIVE],
                        type: string,
                        format: enum,
                      },
                  },
                  {
                    name: index_minimum,
                    in: query,
                    schema: { type: integer, format: uint32 },
                  },
                  {
                    name: meetings_per_week,
                    in: query,
                    schema: { type: integer, format: uint32 },
                  },
                  {
                    name: lesson_hours_per_week,
                    in: query,
                    schema: { type: integer, format: uint32 },
                  },
                  {
                    name: lesson_minutes,
                    in: query,
                    schema: { type: integer, format: uint32 },
                  },
                  { name: sort, in: query, schema: { type: string } },
                  {
                    name: limit,
                    in: query,
                    schema: { type: integer, format: uint32 },
                  },
                  {
                    name: offset,
                    in: query,
                    schema: { type: integer, format: uint32 },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/sharedSubject",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/subject/student:
        {
          get:
            {
              tags: [SubjectService],
              summary: Get student enrolled subjects,
              operationId: SubjectService_GetStudentSubjectList,
              parameters:
                [
                  { name: student_id, in: query, schema: { type: string } },
                  { name: class_id, in: query, schema: { type: string } },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicSubjectListResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/subject/teacher:
        {
          get:
            {
              tags: [SubjectService],
              summary: Get subject created/assigned by teacher,
              description: Returns list of subject that teacher's created/assigned,
              operationId: SubjectService_GetTeacherSubjectList,
              parameters:
                [
                  { name: teacher_id, in: query, schema: { type: string } },
                  { name: class_id, in: query, schema: { type: string } },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicSubjectListResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/subject/{id}":
        {
          get:
            {
              tags: [SubjectService],
              summary: Create a new Subject,
              description: Teacher add new Subject,
              operationId: SubjectService_GetSubjectByID,
              parameters:
                [
                  {
                    name: id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/sharedSubject",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/class-group:
        {
          post:
            {
              tags: [ClassGroupService],
              summary: Create a new Class Group,
              description: Teacher add new class group,
              operationId: ClassGroupService_CreateClassGroup,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicCreateClassGroupRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/sharedClassGroup",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
          patch:
            {
              tags: [ClassGroupService],
              summary: Update Class Group Detail,
              description: Update Class Group Detail,
              operationId: ClassGroupService_UpdateClassGroup,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicUpdateClassGroupRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicUpdateClassGroupResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/class-group/list:
        {
          get:
            {
              tags: [ClassGroupService],
              summary: Get Class Group List,
              description: Get Class Group List,
              operationId: ClassGroupService_GetClassGroupList,
              parameters:
                [
                  { name: id, in: query, schema: { type: string } },
                  { name: name, in: query, schema: { type: string } },
                  { name: grade_level, in: query, schema: { type: string } },
                  { name: major, in: query, schema: { type: string } },
                  { name: curriculum_id, in: query, schema: { type: string } },
                  { name: academic_term, in: query, schema: { type: string } },
                  {
                    name: homeroom_teacher,
                    in: query,
                    schema: { type: string },
                  },
                  {
                    name: group_subject_id,
                    in: query,
                    schema: { type: string },
                  },
                  { name: sort, in: query, schema: { type: string } },
                  {
                    name: limit,
                    in: query,
                    schema: { type: integer, format: uint32 },
                  },
                  {
                    name: offset,
                    in: query,
                    schema: { type: integer, format: uint32 },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetClassGroupListResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/class-group/{id}":
        {
          get:
            {
              tags: [ClassGroupService],
              summary: Get Class Group Detail,
              description: Get Class Group Detail,
              operationId: ClassGroupService_GetClassGroupDetail,
              parameters:
                [
                  {
                    name: id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetClassGroupDetailResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/curriculum:
        {
          post:
            {
              tags: [CurriculumService],
              summary: Create a new curriculum,
              description: Admin register a new user,
              operationId: CurriculumService_CreateCurriculum,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicCreateCurriculumRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/sharedCurriculum",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
    },
  "components":
    {
      "schemas":
        {
          publicCreateSubjectRequest:
            {
              type: object,
              properties:
                {
                  id: { example: 123, type: string, description: Subject ID },
                  teacher_id:
                    { example: 123, type: string, description: Teacher ID },
                  grade_level:
                    {
                      example: 1,
                      type: string,
                      description: Subject Grade Level,
                    },
                  major:
                    {
                      example: [IPA, IPS, BAHASA],
                      type: array,
                      items: { type: string },
                      description: Subject listed major,
                    },
                  name:
                    {
                      example: Matematika,
                      type: string,
                      description: Subject name,
                    },
                  subject_code:
                    { example: MTK, type: string, description: Subject code },
                  subject_type:
                    {
                      enum: [SUBJECT_GENERAL, SUBJECT_MAJOR, SUBJECT_SELECTIVE],
                      type: string,
                      description: Subject type,
                      format: enum,
                    },
                  index_minimum:
                    {
                      type: integer,
                      description: Index Minimum,
                      format: uint32,
                    },
                  meetings_per_week:
                    {
                      type: integer,
                      description: Subject meetings per week,
                      format: uint32,
                    },
                  lesson_hours_per_week:
                    {
                      type: integer,
                      description: Lesson Hours per week,
                      format: uint32,
                    },
                  lesson_minutes:
                    {
                      type: integer,
                      description: Lesson minutes,
                      format: uint32,
                    },
                  description: { type: string, description: Description },
                  instance_id: { type: string, description: Instance ID },
                },
            },
          publicSubjectListResponse:
            {
              type: object,
              properties:
                {
                  subjects:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedSubject",
                        },
                      description: Subject List,
                    },
                },
            },
          publicUpdateSubjectRequest:
            {
              type: object,
              properties:
                {
                  id: { example: 123, type: string, description: Subject ID },
                  teacher_id:
                    { example: 123, type: string, description: Teacher ID },
                  grade_level:
                    {
                      example: 1,
                      type: string,
                      description: Subject Grade Level,
                    },
                  major:
                    {
                      example: [IPA, IPS, BAHASA],
                      type: array,
                      items: { type: string },
                      description: Subject listed major,
                    },
                  name:
                    {
                      example: Matematika,
                      type: string,
                      description: Subject name,
                    },
                  subject_code:
                    { example: MTK, type: string, description: Subject code },
                  subject_type:
                    {
                      enum: [SUBJECT_GENERAL, SUBJECT_MAJOR, SUBJECT_SELECTIVE],
                      type: string,
                      description: Subject type,
                      format: enum,
                    },
                  index_minimum:
                    {
                      type: integer,
                      description: Index Minimum,
                      format: uint32,
                    },
                  meetings_per_week:
                    {
                      type: integer,
                      description: Subject meetings per week,
                      format: uint32,
                    },
                  lesson_hours_per_week:
                    {
                      type: integer,
                      description: Lesson Hours per week,
                      format: uint32,
                    },
                  lesson_minutes:
                    {
                      type: integer,
                      description: Lesson minutes,
                      format: uint32,
                    },
                  description: { type: string, description: Description },
                  instance_id: { type: string, description: Instance ID },
                },
            },
          sharedSubject:
            {
              type: object,
              properties:
                {
                  id: { example: 123, type: string, description: Subject ID },
                  teacher_id:
                    { example: 123, type: string, description: Teacher ID },
                  grade_level:
                    {
                      example: 1,
                      type: string,
                      description: Subject Grade Level,
                    },
                  major:
                    {
                      example: [IPA, IPS, BAHASA],
                      type: array,
                      items: { type: string },
                      description: Subject listed major,
                    },
                  name:
                    {
                      example: Matematika,
                      type: string,
                      description: Subject name,
                    },
                  subject_code:
                    { example: MTK, type: string, description: Subject code },
                  subject_type:
                    {
                      enum: [SUBJECT_GENERAL, SUBJECT_MAJOR, SUBJECT_SELECTIVE],
                      type: string,
                      description: Subject type,
                      format: enum,
                    },
                  index_minimum:
                    {
                      type: integer,
                      description: Index Minimum,
                      format: uint32,
                    },
                  meetings_per_week:
                    {
                      type: integer,
                      description: Subject meetings per week,
                      format: uint32,
                    },
                  lesson_hours_per_week:
                    {
                      type: integer,
                      description: Lesson Hours per week,
                      format: uint32,
                    },
                  lesson_minutes:
                    {
                      type: integer,
                      description: Lesson minutes,
                      format: uint32,
                    },
                  description: { type: string, description: Description },
                  instance_id: { type: string, description: Instance ID },
                  created_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when Curriculum is created,
                      format: date-time,
                    },
                  updated_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when Curriculum data updated,
                      format: date-time,
                    },
                },
            },
          "v1ErrorResponse":
            {
              "type": "object",
              "properties":
                {
                  "errors":
                    {
                      "title": "errors",
                      "type": "array",
                      "items":
                        { "$ref": "#/components/schemas/v1ErrorInfo" },
                    },
                },
            },
          "v1ErrorInfo":
            {
              "type": "object",
              "properties":
                {
                  "message": { "title": "message", "type": "string" },
                  "code": { "title": "code", "type": "string" },
                  "field": { "title": "field", "type": "string" },
                },
            },
          v1CursorPagination:
            {
              type: object,
              properties:
                {
                  limit: { type: integer, format: uint32 },
                  next_cursor: { type: string },
                  prev_cursor: { type: string },
                  curr_cursor: { type: string },
                },
            },
          v1OffsetPagination:
            {
              type: object,
              properties:
                {
                  limit: { type: integer, format: uint32 },
                  offset: { type: integer, format: uint32 },
                  total: { type: integer, format: uint32 },
                },
            },
          v1ResponseMetadata:
            {
              type: object,
              properties:
                {
                  offset_pagination:
                    { $ref: "#/components/schemas/v1OffsetPagination" },
                  cursor_pagination:
                    { $ref: "#/components/schemas/v1CursorPagination" },
                },
            },
          publicCreateClassGroupRequest:
            {
              type: object,
              properties:
                {
                  id:
                    { example: 123, type: string, description: ClassGroup ID },
                  name:
                    {
                      example: Class Group 123,
                      type: string,
                      description: ClassGroup name,
                    },
                  grade_level:
                    { example: 1, type: string, description: Grade Level },
                  major:
                    { example: IPA, type: string, description: Class major },
                  curriculum_id:
                    { type: string, description: ID of curriculum },
                  academic_term:
                    {
                      example: 2024/2025,
                      type: string,
                      description: Academic Term,
                    },
                  homeroom_teacher: { type: string, description: Teacher ID },
                  instance_id: { type: string, description: Instance ID },
                  subject_ids:
                    {
                      type: array,
                      items: { type: string },
                      description: Ids of subject,
                    },
                },
            },
          publicGetClassGroupDetailResponse:
            {
              type: object,
              properties:
                {
                  class_group:
                    {
                      $ref: "#/components/schemas/sharedClassGroup",
                    },
                  subjects:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedSubject",
                        },
                      description: list of Subjects,
                    },
                },
            },
          publicGetClassGroupListResponse:
            {
              type: object,
              properties:
                {
                  class_group:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedClassGroup",
                        },
                      description: Class group List,
                    },
                  meta:
                    { $ref: "#/components/schemas/v1ResponseMetadata" },
                },
            },
          publicUpdateClassGroupRequest:
            {
              type: object,
              properties:
                {
                  id:
                    { example: 123, type: string, description: ClassGroup ID },
                  name:
                    {
                      example: Class Group 123,
                      type: string,
                      description: ClassGroup name,
                    },
                  grade_level:
                    { example: 1, type: string, description: Grade Level },
                  major:
                    { example: IPA, type: string, description: Class major },
                  curriculum_id:
                    { type: string, description: ID of curriculum },
                  academic_term:
                    {
                      example: 2024/2025,
                      type: string,
                      description: Academic Term,
                    },
                  homeroom_teacher: { type: string, description: Teacher ID },
                  group_subject_id:
                    { type: string, description: Group subject ID },
                  subject_ids:
                    {
                      type: array,
                      items: { type: string },
                      description: Ids of subject,
                    },
                },
            },
          publicUpdateClassGroupResponse:
            {
              type: object,
              properties:
                {
                  class_group:
                    {
                      $ref: "#/components/schemas/sharedClassGroup",
                    },
                  subjects:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedSubject",
                        },
                      description: list of Subjects,
                    },
                },
            },
          sharedClassGroup:
            {
              type: object,
              properties:
                {
                  id:
                    { example: 123, type: string, description: ClassGroup ID },
                  name:
                    {
                      example: Class Group 123,
                      type: string,
                      description: ClassGroup name,
                    },
                  grade_level:
                    { example: 1, type: string, description: Grade Level },
                  major:
                    { example: IPA, type: string, description: Class major },
                  curriculum_id:
                    { type: string, description: ID of curriculum },
                  academic_term:
                    {
                      example: 2024/2025,
                      type: string,
                      description: Academic Term,
                    },
                  homeroom_teacher: { type: string, description: Teacher ID },
                  group_subject_id:
                    { type: string, description: Group subject ID },
                  instance_id: { type: string, description: Instance ID },
                  created_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when Curriculum is created,
                      format: date-time,
                    },
                  updated_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when Curriculum data updated,
                      format: date-time,
                    },
                },
            },
          v1Dict:
            {
              type: object,
              properties: { key: { type: string }, value: { type: string } },
            },
          v1KeyArrayValues:
            {
              type: object,
              properties:
                {
                  key: { type: string },
                  value:
                    {
                      type: array,
                      items: { $ref: "#/components/schemas/v1Dict" },
                    },
                },
            },
          publicCreateCurriculumRequest:
            {
              type: object,
              properties:
                {
                  curriculum:
                    {
                      $ref: "#/components/schemas/sharedCurriculum",
                    },
                },
            },
          sharedCurriculum:
            {
              type: object,
              properties:
                {
                  id:
                    { example: 123, type: string, description: Curriculum ID },
                  logo:
                    {
                      example: "https://skola.bucket/curriculum-name.png",
                      type: string,
                      description: Curriculum logo,
                    },
                  name:
                    {
                      example: Indonesia Merdeka,
                      type: string,
                      description: Curriculum name,
                    },
                  description: { type: string, description: Curriculum desc },
                  status:
                    {
                      enum:
                        [CURRICULUM_STATUS_ACTIVE, CURRICULUM_STATUS_INACTIVE],
                      type: string,
                      description: Curriculum Status,
                      format: enum,
                    },
                  notes: { type: string, description: Curriculum notes },
                  instance_id:
                    { type: string, description: Curriculum instance },
                  components:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/v1KeyArrayValues",
                        },
                      description: Curriculum Components,
                    },
                  created_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when Curriculum is created,
                      format: date-time,
                    },
                  updated_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when Curriculum data updated,
                      format: date-time,
                    },
                },
            },
        },
      responses:
        {
          "500":
            {
              description: Internal Server Error,
              content:
                {
                  application/json:
                    {
                      schema:
                        {
                          $ref: "#/components/schemas/v1ErrorResponse",
                        },
                    },
                },
            },
          "401":
            {
              description: Unauthorized JWT token.,
              content:
                {
                  application/json:
                    {
                      schema:
                        {
                          $ref: "#/components/schemas/v1ErrorResponse",
                        },
                    },
                },
            },
        },
      securitySchemes:
        { OAuth2: { type: http, scheme: bearer, bearerFormat: JWT } },
    },
  security: [{ OAuth2: [ADMIN] }],
}
