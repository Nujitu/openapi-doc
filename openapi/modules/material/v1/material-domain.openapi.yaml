# Generated with gnostic protoc-gen-openapi
{
  openapi: 3.0.3,
  info:
    {
      title: Material Domain,
      description: "Skoola Teaching Tools Service, Skoola Header Component Service, Skoola Class Subject Service, Skoola Curriculum Service, Skola Major Service, Skola Subject Service, Skola Class Group Service, Skoola Curriculum Group Component Service",
      version: v1,
    },
  servers:
    [
      { url: "https://staging-api.simbiosa.co.id" },
      { url: "http://localhost:8080" },
    ],
  paths:
    {
      /v1/teaching-tools:
        {
          post:
            {
              tags: [TeachingToolsService],
              summary: Create teaching tools,
              description: Create teaching tools,
              operationId: TeachingToolsService_CreateTeachingTools,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicCreateTeachingToolsRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicCreateTeachingToolsResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
          patch:
            {
              tags: [TeachingToolsService],
              summary: Update teaching tools,
              description: Update teaching tools,
              operationId: TeachingToolsService_UpdateTeachingTools,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicUpdateTeachingToolsRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicUpdateTeachingToolsResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/teaching-tools/curriculum/{curriculum_id}":
        {
          get:
            {
              tags: [TeachingToolsService],
              summary: Get a teaching tools by curriculum id,
              description: Get teaching tools by curriculum id,
              operationId: TeachingToolsService_GetTeachingToolsByCurriculumId,
              parameters:
                [
                  {
                    name: curriculum_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetTeachingToolsByCurriculumIdResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/teaching-tools/detail/{teaching_tools_id}":
        {
          get:
            {
              tags: [TeachingToolsService],
              summary: Get a teaching tools,
              description: Get teaching tools by id,
              operationId: TeachingToolsService_GetTeachingToolsById,
              parameters:
                [
                  {
                    name: teaching_tools_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetTeachingToolsByIdResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/teaching-tools/document:
        {
          get:
            {
              tags: [TeachingToolsService],
              summary: List teaching tool document,
              description: List teaching tool document,
              operationId: TeachingToolsService_ListTeachingToolDocument,
              parameters:
                [
                  { name: curriculum_id, in: query, schema: { type: string } },
                  {
                    name: teaching_tools_id,
                    in: query,
                    schema: { type: string },
                  },
                  {
                    name: teacher_user_id,
                    in: query,
                    schema: { type: string },
                  },
                  { name: subject_id, in: query, schema: { type: string } },
                  { name: major_name, in: query, schema: { type: string } },
                  {
                    name: grade_level,
                    in: query,
                    schema: { type: integer, format: uint32 },
                  },
                  { name: sort, in: query, schema: { type: string } },
                  {
                    name: limit,
                    in: query,
                    schema: { type: integer, format: uint32 },
                  },
                  {
                    name: offset,
                    in: query,
                    schema: { type: integer, format: uint32 },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicListTeachingToolDocumentResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
          post:
            {
              tags: [TeachingToolsService],
              summary: Create teaching tool document,
              description: Create teaching tool document,
              operationId: TeachingToolsService_CreateTeachingToolDocument,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicCreateTeachingToolDocumentRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicCreateTeachingToolDocumentResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
          patch:
            {
              tags: [TeachingToolsService],
              summary: Update teaching tool document,
              description: Update teaching tool document,
              operationId: TeachingToolsService_UpdateTeachingToolDocument,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicUpdateTeachingToolDocumentRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicUpdateTeachingToolDocumentResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/teaching-tools/document/detail/{teaching_tool_document_id}":
        {
          get:
            {
              tags: [TeachingToolsService],
              summary: Get a teaching tool document,
              description: Get teaching tool document by id,
              operationId: TeachingToolsService_GetTeachingToolDocumentById,
              parameters:
                [
                  {
                    name: teaching_tool_document_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetTeachingToolDocumentByIdResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/teaching-tools/document/presigned-url:
        {
          post:
            {
              tags: [TeachingToolsService],
              summary: Create teaching tool document presigned URLs,
              description: Create an AWS S3 presigned URLs to upload teaching tool document assets,
              operationId: TeachingToolsService_CreateTeachingToolDocumentPresignedPostUrl,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicCreateTeachingToolDocumentPresignedPostUrlRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicCreateTeachingToolDocumentPresignedPostUrlResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/teaching-tools/document/{teaching_tool_document_id}":
        {
          delete:
            {
              tags: [TeachingToolsService],
              summary: Delete a teaching tool document,
              description: Delete a teaching tool document,
              operationId: TeachingToolsService_DeleteTeachingToolDocument,
              parameters:
                [
                  {
                    name: teaching_tool_document_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicDeleteTeachingToolDocumentResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/teaching-tools/{teaching_tools_id}":
        {
          delete:
            {
              tags: [TeachingToolsService],
              summary: Delete a teaching-tools,
              description: Delete a teaching-tools,
              operationId: TeachingToolsService_DeleteTeachingTools,
              parameters:
                [
                  {
                    name: teaching_tools_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicDeleteTeachingToolsResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/header-component:
        {
          put:
            {
              tags: [HeaderComponentService],
              summary: Update new header component,
              description: Admin update a new header component,
              operationId: HeaderComponentService_UpdateHeaderComponent,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicUpdateHeaderComponentRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/sharedHeaderComponent",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
          post:
            {
              tags: [HeaderComponentService],
              summary: Create header component,
              description: Admin register a new header component,
              operationId: HeaderComponentService_CreateHeaderComponent,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicCreateHeaderComponentRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/sharedHeaderComponent",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/header-component/{curriculum_id}":
        {
          get:
            {
              tags: [HeaderComponentService],
              summary: get header component by curriculum ID,
              description: get header component list by curriculum ID,
              operationId: HeaderComponentService_GetHeaderComponentByCurriculumID,
              parameters:
                [
                  {
                    name: curriculum_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetHeaderComponentResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/header-component/{id}":
        {
          delete:
            {
              tags: [HeaderComponentService],
              summary: Delete a header component,
              description: Admin deletes a header component by its ID,
              operationId: HeaderComponentService_DeleteHeaderComponent,
              parameters:
                [
                  {
                    name: id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicHeaderComponentResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/header-component/{id}/detail":
        {
          get:
            {
              tags: [HeaderComponentService],
              summary: get header component detail,
              description: get header component detail,
              operationId: HeaderComponentService_GetHeaderComponentDetail,
              parameters:
                [
                  {
                    name: id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/sharedHeaderComponent",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/class-group/subject/{class_id}":
        {
          patch:
            {
              tags: [ClassSubjectService],
              summary: Update Class Group Detail,
              description: Update Class Group Detail,
              operationId: ClassSubjectService_UpdateClassSubjectDetail,
              parameters:
                [
                  {
                    name: class_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/sharedUpdateClassSubjectDetailRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/sharedUpdateClassSubjectDetailResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/class-group/subject/{class_id}/announcements":
        {
          get:
            {
              tags: [ClassSubjectService],
              summary: Get Class Subject Announcement,
              description: Get Class Subject Announcement,
              operationId: ClassSubjectService_GetClassSubjectAnnouncement,
              parameters:
                [
                  {
                    name: class_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                  {
                    name: offset,
                    in: query,
                    schema: { type: integer, format: uint32 },
                  },
                  {
                    name: limit,
                    in: query,
                    schema: { type: integer, format: uint32 },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/sharedGetClassSubjectAnnouncementResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
          post:
            {
              tags: [ClassSubjectService],
              summary: Create Class Subject Announcement,
              description: Create Class Subject Announcement,
              operationId: ClassSubjectService_CreateClassSubjectAnnouncement,
              parameters:
                [
                  {
                    name: class_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/sharedCreateClassSubjectAnnouncementRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/sharedCreateClassSubjectAnnouncementResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/class-group/subject/{class_id}/announcements/{announcement_id}":
        {
          delete:
            {
              tags: [ClassSubjectService],
              summary: Get Class Subject Announcement,
              description: Get Class Subject Announcement,
              operationId: ClassSubjectService_DeleteClassSubjectAnnouncement,
              parameters:
                [
                  {
                    name: class_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                  {
                    name: announcement_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/sharedDeleteClassSubjectAnnouncementResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/curriculum:
        {
          post:
            {
              tags: [CurriculumService],
              summary: Create a new curriculum,
              description: Admin register a new curriculum,
              operationId: CurriculumService_CreateCurriculum,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicCreateCurriculumRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/sharedCurriculum",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/curriculum/list:
        {
          post:
            {
              tags: [CurriculumService],
              summary: Get list curriculum,
              operationId: CurriculumService_GetCurriculumList,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicGetCurriculumListRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetCurriculumListResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/curriculum/{id}":
        {
          delete:
            {
              tags: [CurriculumService],
              summary: Delete Curriculum,
              operationId: CurriculumService_DeleteCurriculum,
              parameters:
                [
                  {
                    name: id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicDeleteCurriculumResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
          patch:
            {
              tags: [CurriculumService],
              summary: Update Curriculum,
              operationId: CurriculumService_UpdateCurriculum,
              parameters:
                [
                  {
                    name: id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicUpdateCurriculumRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicUpdateCurriculumResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/major:
        {
          get:
            {
              tags: [MajorService],
              summary: List major,
              description: Return list of majors,
              operationId: MajorService_ListMajor,
              parameters:
                [{ name: instance_id, in: query, schema: { type: string } }],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicListMajorResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
          post:
            {
              tags: [MajorService],
              summary: Create a new Major,
              description: Administrator add new Major,
              operationId: MajorService_CreateMajor,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicCreateMajorRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicCreateMajorResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/major/detail/{id}":
        {
          get:
            {
              tags: [MajorService],
              summary: Create a new major,
              description: Teacher add new major,
              operationId: MajorService_GetMajorByID,
              parameters:
                [
                  {
                    name: id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetMajorByIDResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/major/{id}":
        {
          delete:
            {
              tags: [MajorService],
              summary: Delete an major,
              description: Delete an major,
              operationId: MajorService_DeleteMajor,
              parameters:
                [
                  {
                    name: id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicDeleteMajorResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/subject:
        {
          post:
            {
              tags: [SubjectService],
              summary: Create a new Subject,
              description: Teacher add new Subject,
              operationId: SubjectService_CreateSubject,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicCreateSubjectRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/sharedSubject",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
          patch:
            {
              tags: [SubjectService],
              summary: Create a new Subject,
              description: Teacher add new Subject,
              operationId: SubjectService_UpdateSubject,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicUpdateSubjectRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/sharedSubject",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/subject/list:
        {
          get:
            {
              tags: [SubjectService],
              summary: Get subject list,
              description: Return list of subjects,
              operationId: SubjectService_GetSubjectList,
              parameters:
                [
                  { name: id, in: query, schema: { type: string } },
                  { name: teacher_id, in: query, schema: { type: string } },
                  { name: grade_level, in: query, schema: { type: string } },
                  {
                    name: major,
                    in: query,
                    schema: { type: array, items: { type: string } },
                  },
                  { name: name, in: query, schema: { type: string } },
                  { name: subject_code, in: query, schema: { type: string } },
                  {
                    name: subject_type,
                    in: query,
                    schema:
                      {
                        enum:
                          [SUBJECT_GENERAL, SUBJECT_MAJOR, SUBJECT_SELECTIVE],
                        type: string,
                        format: enum,
                      },
                  },
                  {
                    name: index_minimum,
                    in: query,
                    schema: { type: integer, format: uint32 },
                  },
                  {
                    name: meetings_per_week,
                    in: query,
                    schema: { type: integer, format: uint32 },
                  },
                  {
                    name: lesson_hours_per_week,
                    in: query,
                    schema: { type: integer, format: uint32 },
                  },
                  {
                    name: lesson_minutes,
                    in: query,
                    schema: { type: integer, format: uint32 },
                  },
                  { name: sort, in: query, schema: { type: string } },
                  {
                    name: limit,
                    in: query,
                    schema: { type: integer, format: uint32 },
                  },
                  {
                    name: offset,
                    in: query,
                    schema: { type: integer, format: uint32 },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetSubjectListResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/subject/{id}":
        {
          get:
            {
              tags: [SubjectService],
              summary: Create a new Subject,
              description: Teacher add new Subject,
              operationId: SubjectService_GetSubjectByID,
              parameters:
                [
                  {
                    name: id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/sharedSubject",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/class-group:
        {
          post:
            {
              tags: [ClassGroupService],
              summary: Create a new Class Group,
              description: Teacher add new class group,
              operationId: ClassGroupService_CreateClassGroup,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicCreateClassGroupRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/sharedClassGroup",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/class-group/add-student:
        {
          post:
            {
              tags: [ClassGroupService],
              summary: Adding student to class,
              description: Adding student to class,
              operationId: ClassGroupService_AddStudentToClass,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicAddStudentToClassRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicAddStudentToClassResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/class-group/add-student/{class_id}/{student_id}":
        {
          delete:
            {
              tags: [ClassGroupService],
              summary: Removing student from class,
              description: Removing student from class,
              operationId: ClassGroupService_RemoveStudentFromClass,
              parameters:
                [
                  {
                    name: class_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                  {
                    name: student_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicRemoveStudentFromClassResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/class-group/list:
        {
          get:
            {
              tags: [ClassGroupService],
              summary: Get Class Group List,
              description: Get Class Group List,
              operationId: ClassGroupService_GetClassGroupList,
              parameters:
                [
                  { name: id, in: query, schema: { type: string } },
                  { name: name, in: query, schema: { type: string } },
                  { name: grade_level, in: query, schema: { type: string } },
                  { name: major, in: query, schema: { type: string } },
                  { name: curriculum_id, in: query, schema: { type: string } },
                  { name: academic_term, in: query, schema: { type: string } },
                  {
                    name: homeroom_teacher,
                    in: query,
                    schema: { type: string },
                  },
                  { name: sort, in: query, schema: { type: string } },
                  {
                    name: limit,
                    in: query,
                    schema: { type: integer, format: uint32 },
                  },
                  {
                    name: offset,
                    in: query,
                    schema: { type: integer, format: uint32 },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetClassGroupListResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/class-group/student/{student_id}":
        {
          get:
            {
              tags: [ClassGroupService],
              summary: Get Student Classes,
              description: Retrieve students enrolled classes past/present,
              operationId: ClassGroupService_GetStudentClasses,
              parameters:
                [
                  {
                    name: student_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetStudentClassesResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/class-group/teacher/{teacher_id}":
        {
          get:
            {
              tags: [ClassGroupService],
              summary: Get Teacher Classes,
              description: Retrieve teacher enrolled classes past/present,
              operationId: ClassGroupService_GetTeacherClasses,
              parameters:
                [
                  {
                    name: teacher_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetTeacherClassesResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/class-group/{id}":
        {
          get:
            {
              tags: [ClassGroupService],
              summary: Get Class Group Detail,
              description: Get Class Group Detail,
              operationId: ClassGroupService_GetClassGroupDetail,
              parameters:
                [
                  {
                    name: id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetClassGroupDetailResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
          patch:
            {
              tags: [ClassGroupService],
              summary: Update Class Group Detail,
              description: Update Class Group Detail,
              operationId: ClassGroupService_UpdateClassGroup,
              parameters:
                [
                  {
                    name: id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicUpdateClassGroupRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicUpdateClassGroupResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/class-group/{id}/class-subject":
        {
          get:
            {
              tags: [ClassGroupService],
              summary: GetClassSubjectDetails,
              description: retrieves a subject taught in the specified class.,
              operationId: ClassGroupService_GetClassSubjectDetails,
              parameters:
                [
                  {
                    name: id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetClassSubjectDetailsResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/class-group/{id}/students":
        {
          get:
            {
              tags: [ClassGroupService],
              summary: GetStudentsInClass,
              description: retrieves a list of students enrolled in the specified class.,
              operationId: ClassGroupService_GetStudentsInClass,
              parameters:
                [
                  {
                    name: id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetStudentsInClassResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/class-group/{student_id}/student/courses":
        {
          get:
            {
              tags: [ClassGroupService],
              summary: GetStudentCourses,
              description: retrieves a list of subjects students enrolled,
              operationId: ClassGroupService_GetStudentCourses,
              parameters:
                [
                  {
                    name: student_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetStudentCoursesResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/class-group/{teacher_id}/teacher/courses":
        {
          get:
            {
              tags: [ClassGroupService],
              summary: GetTeacherCourses,
              description: retrieves a list of subjects taught by the specified teacher.,
              operationId: ClassGroupService_GetTeacherCourses,
              parameters:
                [
                  {
                    name: teacher_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetTeacherActiveSubjectsResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/class-group/{teacher_id}/teacher/courses/stats":
        {
          get:
            {
              tags: [ClassGroupService],
              summary: GetTeacherCoursesStats,
              description: retrieves a list of subjects taught by the specified teacher.,
              operationId: ClassGroupService_GetTeacherCoursesStats,
              parameters:
                [
                  {
                    name: teacher_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                  {
                    name: limit,
                    in: query,
                    schema: { type: integer, format: uint32 },
                  },
                  {
                    name: offset,
                    in: query,
                    schema: { type: integer, format: uint32 },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetTeacherCoursesStatsResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/curriculum-group-component:
        {
          put:
            {
              tags: [CurriculumGroupComponentService],
              summary: Update new curriculum,
              description: Admin update a new curriculum,
              operationId: CurriculumGroupComponentService_UpdateCurriculumGroupComponent,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicUpdateCurriculumGroupComponentRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/sharedCurriculumGroupComponent",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
          post:
            {
              tags: [CurriculumGroupComponentService],
              summary: Create a new curriculum group component,
              description: Admin register a new curriculum group component,
              operationId: CurriculumGroupComponentService_CreateCurriculumGroupComponent,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicCreateCurriculumGroupComponentRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/sharedCurriculumGroupComponent",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/curriculum-group-component/{header_id}":
        {
          get:
            {
              tags: [CurriculumGroupComponentService],
              summary: get component list by header component ID,
              description: get component list by header component ID,
              operationId: CurriculumGroupComponentService_GetCurriculumGroupComponentByHeader,
              parameters:
                [
                  {
                    name: header_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetCurriculumGroupComponentResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/curriculum-group-component/{id}":
        {
          delete:
            {
              tags: [CurriculumGroupComponentService],
              summary: Delete a curriculum,
              description: Admin deletes a curriculum by its ID,
              operationId: CurriculumGroupComponentService_DeleteCurriculumGroupComponent,
              parameters:
                [
                  {
                    name: id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicCurriculumGroupComponentResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/curriculum-group-component/{id}/detail":
        {
          get:
            {
              tags: [CurriculumGroupComponentService],
              summary: get component detail,
              description: get component detail,
              operationId: CurriculumGroupComponentService_GetCurriculumGroupComponentDetail,
              parameters:
                [
                  {
                    name: id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/sharedCurriculumGroupComponent",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
    },
  "components":
    {
      "schemas":
        {
          v1AttachmentFile:
            {
              type: object,
              properties:
                {
                  display_name: { type: string },
                  unique_name: { type: string },
                  file_extension: { type: string },
                  file_size: { type: string },
                  link: { type: string },
                },
            },
          v1NullableAttachmentFile:
            {
              type: object,
              properties:
                {
                  is_null: { type: boolean },
                  file:
                    { $ref: "#/components/schemas/v1AttachmentFile" },
                },
            },
          v1S3PresignedUrlRequest:
            {
              type: object,
              properties:
                { file_name: { type: string }, file_size: { type: string } },
            },
          v1S3PresignedUrlResponse:
            {
              type: object,
              properties:
                {
                  url: { type: string },
                  values:
                    {
                      $ref: "#/components/schemas/v1S3PresignedValues",
                    },
                },
            },
          v1S3PresignedValues:
            {
              type: object,
              properties:
                {
                  X_Amz_Algorithm: { type: string },
                  X_Amz_Credential: { type: string },
                  X_Amz_Date: { type: string },
                  X_Amz_Signature: { type: string },
                  key: { type: string },
                  policy: { type: string },
                },
            },
          publicCreateTeachingToolDocumentPresignedPostUrlRequest:
            {
              type: object,
              properties:
                {
                  files:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/v1S3PresignedUrlRequest",
                        },
                      description: File data consists of the filename along with its extension and the file size in bytes.,
                    },
                },
            },
          publicCreateTeachingToolDocumentPresignedPostUrlResponse:
            {
              type: object,
              properties:
                {
                  presignedUrls:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/v1S3PresignedUrlResponse",
                        },
                      description: Presigned Urls,
                    },
                },
            },
          publicCreateTeachingToolDocumentRequest:
            {
              type: object,
              properties:
                {
                  curriculum_id:
                    { example: 123, type: string, description: Curriculum ID },
                  instance_id:
                    { example: 123, type: string, description: Instance ID },
                  teaching_tools_id:
                    {
                      example: 123,
                      type: string,
                      description: Teaching Tools ID,
                    },
                  teacher_user_id:
                    {
                      example: 123,
                      type: string,
                      description: Teacher user ID,
                    },
                  subject_id:
                    { example: 123, type: string, description: Subject ID },
                  major_name:
                    { example: IPA, type: string, description: Major name },
                  grade_level:
                    {
                      example: 10,
                      type: integer,
                      description: Grade level,
                      format: uint32,
                    },
                  attachment_files:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/v1NullableAttachmentFile",
                        },
                      description: Attachment files,
                    },
                },
            },
          publicCreateTeachingToolDocumentResponse:
            {
              type: object,
              properties:
                {
                  teaching_tool_document:
                    {
                      $ref: "#/components/schemas/sharedTeachingToolDocument",
                    },
                  message:
                    {
                      type: string,
                      description: response message of creating teaching tool document,
                    },
                },
            },
          publicCreateTeachingToolsRequest:
            {
              type: object,
              properties:
                {
                  curriculum_id:
                    { example: 123, type: string, description: Curriculum ID },
                  instance_id:
                    { example: 123, type: string, description: Instance ID },
                  components:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedTeachingToolComponent",
                        },
                      description: The list of teaching tool components,
                    },
                },
            },
          publicCreateTeachingToolsResponse:
            {
              type: object,
              properties:
                {
                  teaching_tools:
                    {
                      $ref: "#/components/schemas/sharedTeachingTools",
                    },
                  message:
                    {
                      type: string,
                      description: response message of creating teaching tools,
                    },
                },
            },
          publicDeleteTeachingToolDocumentResponse:
            {
              type: object,
              properties:
                {
                  message:
                    {
                      type: string,
                      description: response message of deleting teaching tool document,
                    },
                },
            },
          publicDeleteTeachingToolsResponse:
            {
              type: object,
              properties:
                {
                  message:
                    {
                      type: string,
                      description: response message of deleting teaching tools,
                    },
                },
            },
          publicGetTeachingToolDocumentByIdResponse:
            {
              type: object,
              properties:
                {
                  teaching_tool_document:
                    {
                      $ref: "#/components/schemas/sharedTeachingToolDocument",
                    },
                },
            },
          publicGetTeachingToolsByCurriculumIdResponse:
            {
              type: object,
              properties:
                {
                  teaching_tools:
                    {
                      $ref: "#/components/schemas/sharedTeachingTools",
                    },
                },
            },
          publicGetTeachingToolsByIdResponse:
            {
              type: object,
              properties:
                {
                  teaching_tools:
                    {
                      $ref: "#/components/schemas/sharedTeachingTools",
                    },
                },
            },
          publicListTeachingToolDocumentResponse:
            {
              type: object,
              properties:
                {
                  teaching_tool_documents:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedListTeachingToolDocument",
                        },
                      description: List Teaching Tool Documents,
                    },
                },
            },
          publicUpdateTeachingToolDocumentRequest:
            {
              type: object,
              properties:
                {
                  id:
                    {
                      example: 123,
                      type: string,
                      description: Teaching Tool Documents ID,
                    },
                  attachment_files:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/v1NullableAttachmentFile",
                        },
                      description: Attachment files,
                    },
                },
            },
          publicUpdateTeachingToolDocumentResponse:
            {
              type: object,
              properties:
                {
                  teaching_tool_document:
                    {
                      $ref: "#/components/schemas/sharedTeachingToolDocument",
                    },
                  message:
                    {
                      type: string,
                      description: response message of updating teaching tool document,
                    },
                },
            },
          publicUpdateTeachingToolsRequest:
            {
              type: object,
              properties:
                {
                  id:
                    {
                      example: 123,
                      type: string,
                      description: Teaching Tools ID,
                    },
                  components:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedTeachingToolComponent",
                        },
                      description: The list of teaching tool components,
                    },
                },
            },
          publicUpdateTeachingToolsResponse:
            {
              type: object,
              properties:
                {
                  teaching_tools:
                    {
                      $ref: "#/components/schemas/sharedTeachingTools",
                    },
                  message:
                    {
                      type: string,
                      description: response message of updating teaching tools,
                    },
                },
            },
          sharedListTeachingToolAttachment:
            {
              type: object,
              properties:
                {
                  title:
                    {
                      example: Analisis Keterkaitan CP dan TP,
                      type: string,
                      description: Component title,
                    },
                  attachment_file:
                    {
                      $ref: "#/components/schemas/v1NullableAttachmentFile",
                    },
                },
            },
          sharedListTeachingToolDocument:
            {
              type: object,
              properties:
                {
                  id:
                    {
                      example: 123,
                      type: string,
                      description: Teaching Tool Documents ID,
                    },
                  curriculum_id:
                    { example: 123, type: string, description: Curriculum ID },
                  instance_id:
                    { example: 123, type: string, description: Instance ID },
                  teaching_tools_id:
                    {
                      example: 123,
                      type: string,
                      description: Teaching Tools ID,
                    },
                  teacher_user:
                    {
                      $ref: "#/components/schemas/sharedUserPublicDetails",
                    },
                  subject:
                    {
                      $ref: "#/components/schemas/sharedSubject",
                    },
                  major_name:
                    { example: IPA, type: string, description: Major name },
                  grade_level:
                    {
                      example: 10,
                      type: integer,
                      description: Grade level,
                      format: uint32,
                    },
                  attachment_files:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedListTeachingToolAttachment",
                        },
                      description: Attachment files,
                    },
                  created_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when teaching tool documents is created,
                      format: date-time,
                    },
                  updated_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when teaching tool documents data updated,
                      format: date-time,
                    },
                },
            },
          sharedSubject:
            {
              type: object,
              properties:
                {
                  id: { example: 123, type: string, description: Subject ID },
                  teacher_id:
                    { example: 123, type: string, description: Teacher ID },
                  grade_level:
                    {
                      example: 1,
                      type: string,
                      description: Subject Grade Level,
                    },
                  major:
                    {
                      example: [IPA, IPS, BAHASA],
                      type: array,
                      items: { type: string },
                      description: Subject listed major,
                    },
                  name:
                    {
                      example: Matematika,
                      type: string,
                      description: Subject name,
                    },
                  subject_code:
                    { example: MTK, type: string, description: Subject code },
                  subject_type:
                    {
                      enum: [SUBJECT_GENERAL, SUBJECT_MAJOR, SUBJECT_SELECTIVE],
                      type: string,
                      description: Subject type,
                      format: enum,
                    },
                  description: { type: string, description: Description },
                  instance_id: { type: string, description: Instance ID },
                  created_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when Curriculum is created,
                      format: date-time,
                    },
                  updated_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when Curriculum data updated,
                      format: date-time,
                    },
                },
            },
          sharedTeachingToolComponent:
            {
              type: object,
              properties:
                {
                  title:
                    {
                      example: Analisis Keterkaitan CP dan TP,
                      type: string,
                      description: Component title,
                    },
                  notes:
                    {
                      example: This component is optional,
                      type: string,
                      description: Component notes if any,
                    },
                },
            },
          sharedTeachingToolDocument:
            {
              type: object,
              properties:
                {
                  id:
                    {
                      example: 123,
                      type: string,
                      description: Teaching Tool Documents ID,
                    },
                  curriculum_id:
                    { example: 123, type: string, description: Curriculum ID },
                  instance_id:
                    { example: 123, type: string, description: Instance ID },
                  teaching_tools_id:
                    {
                      example: 123,
                      type: string,
                      description: Teaching Tools ID,
                    },
                  teacher_user_id:
                    {
                      example: 123,
                      type: string,
                      description: Teacher user ID,
                    },
                  subject_id:
                    { example: 123, type: string, description: Subject ID },
                  major_name:
                    { example: IPA, type: string, description: Major name },
                  grade_level:
                    {
                      example: 10,
                      type: integer,
                      description: Grade level,
                      format: uint32,
                    },
                  attachment_files:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/v1NullableAttachmentFile",
                        },
                      description: Attachment files,
                    },
                  created_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when teaching tool documents is created,
                      format: date-time,
                    },
                  updated_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when teaching tool documents data updated,
                      format: date-time,
                    },
                },
            },
          sharedTeachingTools:
            {
              type: object,
              properties:
                {
                  id:
                    {
                      example: 123,
                      type: string,
                      description: Teaching Tools ID,
                    },
                  curriculum_id:
                    { example: 123, type: string, description: Curriculum ID },
                  instance_id:
                    { example: 123, type: string, description: Instance ID },
                  components:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedTeachingToolComponent",
                        },
                      description: The list of teaching tool components,
                    },
                  created_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when Curriculum is created,
                      format: date-time,
                    },
                  updated_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when Curriculum data updated,
                      format: date-time,
                    },
                },
            },
          sharedUserPublicDetails:
            {
              type: object,
              properties:
                {
                  id: { example: 123, type: string, description: User ID },
                  fullname:
                    {
                      example: John F. Doe,
                      type: string,
                      description: User full name,
                    },
                  username:
                    {
                      example: JohnFD,
                      type: string,
                      description: User username,
                    },
                  phone_number:
                    {
                      example: +628790909321,
                      type: string,
                      description: User phone number,
                    },
                  email:
                    {
                      example: john.fd@gmail.com,
                      type: string,
                      description: User email,
                    },
                  gender:
                    {
                      example: Male,
                      enum: [GENDER_UNSPECIFIED, MALE, FEMALE],
                      type: string,
                      description: User gender,
                      format: enum,
                    },
                  role_type:
                    {
                      enum:
                        [
                          UNSPECIFIED,
                          STUDENT,
                          PARENT,
                          TEACHER,
                          STAFF,
                          ADMINISTRATOR,
                          SUPERADMINISTRATOR,
                        ],
                      type: string,
                      format: enum,
                    },
                  status:
                    {
                      enum:
                        [
                          USER_STATUS_UNSPECIFIED,
                          USER_STATUS_ACTIVE,
                          USER_STATUS_INACTIVE,
                        ],
                      type: string,
                      description: Represent user status,
                      format: enum,
                    },
                  profile_picture:
                    { $ref: "#/components/schemas/v1AttachmentFile" },
                  created_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when user is created,
                      format: date-time,
                    },
                  updated_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when user data updated,
                      format: date-time,
                    },
                },
            },
          "v1ErrorResponse":
            {
              "type": "object",
              "properties":
                {
                  "errors":
                    {
                      "title": "errors",
                      "type": "array",
                      "items":
                        { "$ref": "#/components/schemas/v1ErrorInfo" },
                    },
                },
            },
          "v1ErrorInfo":
            {
              "type": "object",
              "properties":
                {
                  "message": { "title": "message", "type": "string" },
                  "code": { "title": "code", "type": "string" },
                  "field": { "title": "field", "type": "string" },
                },
            },
          publicCreateHeaderComponentRequest:
            {
              type: object,
              properties:
                {
                  header_component:
                    {
                      $ref: "#/components/schemas/sharedHeaderComponent",
                    },
                },
            },
          publicGetHeaderComponentResponse:
            {
              type: object,
              properties:
                {
                  header_components:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedHeaderComponent",
                        },
                    },
                },
            },
          publicHeaderComponentResponse:
            {
              type: object,
              properties:
                {
                  message:
                    { type: string, description: message for header component },
                },
            },
          publicUpdateHeaderComponentRequest:
            {
              type: object,
              properties:
                {
                  header_component:
                    {
                      $ref: "#/components/schemas/sharedHeaderComponent",
                    },
                },
            },
          sharedHeaderComponent:
            {
              type: object,
              properties:
                {
                  id:
                    {
                      example: 123,
                      type: string,
                      description: HeaderComponentID,
                    },
                  title:
                    {
                      example: header group description,
                      type: string,
                      description: Header Component Description,
                    },
                  description:
                    {
                      example: header group description,
                      type: string,
                      description: Header Component Description,
                    },
                  curriculum_id:
                    {
                      example: header group description,
                      type: string,
                      description: Curriculum ID,
                    },
                },
            },
          v1CursorPagination:
            {
              type: object,
              properties:
                {
                  limit: { type: integer, format: uint32 },
                  next_cursor: { type: string },
                  prev_cursor: { type: string },
                  curr_cursor: { type: string },
                },
            },
          v1OffsetPagination:
            {
              type: object,
              properties:
                {
                  limit: { type: integer, format: uint32 },
                  offset: { type: integer, format: uint32 },
                  total: { type: integer, format: uint32 },
                },
            },
          v1ResponseMetadata:
            {
              type: object,
              properties:
                {
                  offset_pagination:
                    { $ref: "#/components/schemas/v1OffsetPagination" },
                  cursor_pagination:
                    { $ref: "#/components/schemas/v1CursorPagination" },
                },
            },
          sharedClassSubjectAnnouncement:
            {
              type: object,
              properties:
                {
                  announcement_id:
                    {
                      example: 123124,
                      type: string,
                      description: Announcement ID,
                    },
                  class_subject_id:
                    {
                      example: e159dd7a-b4ea-4395-ad24,
                      type: string,
                      description: Class Subject Id,
                    },
                  teacher_id:
                    { example: 5432123, type: string, description: Teacher Id },
                  teacher_name:
                    {
                      example: Budi Santoso,
                      type: string,
                      description: Teacher Name,
                    },
                  title:
                    {
                      example: Pengumuman sesi khusus materi barisan dan deret,
                      type: string,
                      description: Class ID,
                    },
                  description:
                    {
                      example: Sesi pembelajaran khusus untuk mengenal konsep dasar barisan dan deret.,
                      type: string,
                      description: Class ID,
                    },
                  created_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when the announcement is created,
                      format: date-time,
                    },
                },
            },
          sharedClassSubjectDetailPayload:
            {
              type: object,
              properties:
                {
                  subject_id:
                    { example: 123, type: string, description: Subject ID },
                  homeroom_teacher_id:
                    { example: 123, type: string, description: teacher ID },
                  subject_name:
                    {
                      example: Matematika,
                      type: string,
                      description: Subject name,
                    },
                  index_minimum:
                    {
                      type: integer,
                      description: Index Minimum,
                      format: uint32,
                    },
                  meetings_per_week:
                    {
                      type: integer,
                      description: Subject meetings per week,
                      format: uint32,
                    },
                  lesson_hours_per_week:
                    {
                      type: integer,
                      description: Lesson Hours per week,
                      format: uint32,
                    },
                  lesson_minutes:
                    {
                      type: integer,
                      description: Lesson minutes,
                      format: uint32,
                    },
                  subject_type:
                    {
                      enum: [SUBJECT_GENERAL, SUBJECT_MAJOR, SUBJECT_SELECTIVE],
                      type: string,
                      description: Subject type,
                      format: enum,
                    },
                },
            },
          sharedCreateClassSubjectAnnouncementRequest:
            {
              type: object,
              properties:
                {
                  class_id:
                    { example: 123124, type: string, description: Class ID },
                  teacher_id:
                    {
                      example: 12321412,
                      type: string,
                      description: Teacher ID,
                    },
                  teacher_name:
                    {
                      example: Budi Santoso,
                      type: string,
                      description: Teacher Name,
                    },
                  title:
                    {
                      example: Pengumuman sesi khusus materi barisan dan deret,
                      type: string,
                      description: Title of the Announcement,
                    },
                  description:
                    {
                      example: Sesi pembelajaran khusus untuk mengenal konsep dasar barisan dan deret.,
                      type: string,
                      description: Description of the Announcement,
                    },
                },
            },
          sharedCreateClassSubjectAnnouncementResponse:
            {
              type: object,
              properties:
                {
                  message:
                    {
                      type: string,
                      description: Message confirming the creation of the new Announcement,
                    },
                },
            },
          sharedDeleteClassSubjectAnnouncementResponse:
            {
              type: object,
              properties:
                {
                  message:
                    {
                      type: string,
                      description: Message confirming deletion of the Announcement,
                    },
                },
            },
          sharedGetClassSubjectAnnouncementResponse:
            {
              type: object,
              properties:
                {
                  announcements:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedClassSubjectAnnouncement",
                        },
                      description: Class Announcements,
                    },
                  metadata:
                    { $ref: "#/components/schemas/v1ResponseMetadata" },
                },
            },
          sharedUpdateClassSubjectDetailRequest:
            {
              type: object,
              properties:
                {
                  class_id:
                    { example: 123, type: string, description: Class ID },
                  class_subjects:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedClassSubjectDetailPayload",
                        },
                      description: Component of class,
                    },
                },
            },
          sharedUpdateClassSubjectDetailResponse:
            {
              type: object,
              properties:
                {
                  class_subjects:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedClassSubjectDetailPayload",
                        },
                      description: Component of class,
                    },
                  message: { type: string, description: response info },
                },
            },
          publicCreateCurriculumRequest:
            {
              type: object,
              properties:
                {
                  curriculum:
                    {
                      $ref: "#/components/schemas/sharedCurriculum",
                    },
                },
            },
          publicDeleteCurriculumResponse:
            { type: object, properties: { message: { type: string } } },
          publicGetCurriculumListRequest:
            {
              type: object,
              properties:
                {
                  name:
                    {
                      example: Indonesia Merdeka,
                      type: string,
                      description: Curriculum name,
                    },
                  instance_id:
                    { type: string, description: Curriculum instance },
                  limit:
                    {
                      example: 20,
                      type: integer,
                      description: The maximum number of entries,
                      format: uint32,
                    },
                  offset:
                    {
                      example: 0,
                      type: integer,
                      description: The starting position of entries,
                      format: uint32,
                    },
                },
            },
          publicGetCurriculumListResponse:
            {
              type: object,
              properties:
                {
                  curriculums:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedCurriculum",
                        },
                      description: Curriculum List,
                    },
                  meta:
                    { $ref: "#/components/schemas/v1ResponseMetadata" },
                },
            },
          publicUpdateCurriculumRequest:
            {
              type: object,
              properties:
                {
                  id: { type: string },
                  curriculum:
                    {
                      $ref: "#/components/schemas/sharedCurriculum",
                    },
                },
            },
          publicUpdateCurriculumResponse:
            {
              type: object,
              properties:
                {
                  curriculum:
                    {
                      $ref: "#/components/schemas/sharedCurriculum",
                    },
                },
            },
          sharedCurriculum:
            {
              type: object,
              properties:
                {
                  id:
                    { example: 123, type: string, description: Curriculum ID },
                  logo:
                    {
                      example: "https://skola.bucket/curriculum-name.png",
                      type: string,
                      description: Curriculum logo,
                    },
                  name:
                    {
                      example: Indonesia Merdeka,
                      type: string,
                      description: Curriculum name,
                    },
                  description: { type: string, description: Curriculum desc },
                  status:
                    {
                      enum:
                        [
                          CURRICULUM_STATUS_UNSPECIFIED,
                          CURRICULUM_STATUS_INACTIVE,
                          CURRICULUM_STATUS_ACTIVE,
                        ],
                      type: string,
                      description: Curriculum Status,
                      format: enum,
                    },
                  notes: { type: string, description: Curriculum notes },
                  instance_id:
                    { type: string, description: Curriculum instance },
                  academic_term:
                    {
                      example: 2024/2025,
                      type: string,
                      description: Academic Term,
                    },
                  semester:
                    {
                      example: 1,
                      type: string,
                      description: Curriculum semester,
                    },
                  type:
                    {
                      example: 1,
                      enum:
                        [
                          CURRICULUM_UNSPECIFIED,
                          CURRICULUM_NATIONAL,
                          CURRICULUM_OTHERS,
                        ],
                      type: string,
                      description: Curriculum type,
                      format: enum,
                    },
                  due_date:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: curriculum start date,
                      format: date-time,
                    },
                  until_date:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: curriculum end date,
                      format: date-time,
                    },
                  start_year:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: curriculum start year,
                    },
                  end_year:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: curriculum end year,
                    },
                  components:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedCurriculumGroupComponent",
                        },
                      description: Curriculum Components,
                    },
                  created_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when Curriculum is created,
                      format: date-time,
                    },
                  updated_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when Curriculum data updated,
                      format: date-time,
                    },
                },
            },
          sharedCurriculumGroupComponent:
            {
              type: object,
              properties:
                {
                  id:
                    {
                      example: 123,
                      type: string,
                      description: CurriculumGroupComponentID,
                    },
                  description:
                    {
                      example: ini ada group component,
                      type: string,
                      description: Curriculum Group Component Description,
                    },
                  component_type:
                    {
                      example: choose component type,
                      enum:
                        [
                          DEFAULT,
                          MULTIPLE_TEXT_INPUT,
                          TEXT_DESCRIPTION,
                          MULTIPLE_TEXT_DESCRIPTION,
                          CHECKLIST,
                          RADIO_BUTTON,
                          TEXT_INPUT,
                        ],
                      type: string,
                      description: Component type,
                      format: enum,
                    },
                  header_id:
                    {
                      example: Header Component ID,
                      type: string,
                      description: Header Component ID,
                    },
                },
            },
          publicCreateMajorRequest:
            {
              type: object,
              properties:
                {
                  name:
                    {
                      example: Bahasa,
                      type: string,
                      description: "Major name must be unique. For example: IPA, IPS, Bahasa, Akuntansi, etc.",
                    },
                  instance_id: { type: string, description: Instance ID },
                },
            },
          publicCreateMajorResponse:
            {
              type: object,
              properties:
                {
                  major:
                    {
                      $ref: "#/components/schemas/sharedMajor",
                    },
                  message:
                    {
                      type: string,
                      description: response message of creating major,
                    },
                },
            },
          publicDeleteMajorResponse:
            {
              type: object,
              properties:
                {
                  message:
                    {
                      type: string,
                      description: response message of deleting major,
                    },
                },
            },
          publicGetMajorByIDResponse:
            {
              type: object,
              properties:
                {
                  major:
                    {
                      $ref: "#/components/schemas/sharedMajor",
                    },
                },
            },
          publicListMajorResponse:
            {
              type: object,
              properties:
                {
                  majors:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedMajor",
                        },
                      description: Major List,
                    },
                },
            },
          sharedMajor:
            {
              type: object,
              properties:
                {
                  id: { example: 123, type: string, description: Major ID },
                  name:
                    {
                      example: Bahasa,
                      type: string,
                      description: "Major name must be unique. For example: IPA, IPS, Bahasa, Akuntansi, etc.",
                    },
                  instance_id: { type: string, description: Instance ID },
                  created_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when Curriculum is created,
                      format: date-time,
                    },
                  updated_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when Curriculum data updated,
                      format: date-time,
                    },
                },
            },
          publicCreateSubjectRequest:
            {
              type: object,
              properties:
                {
                  id: { example: 123, type: string, description: Subject ID },
                  teacher_id:
                    { example: 123, type: string, description: Teacher ID },
                  grade_level:
                    {
                      example: 1,
                      type: string,
                      description: Subject Grade Level,
                    },
                  major:
                    {
                      example: [IPA, IPS, BAHASA],
                      type: array,
                      items: { type: string },
                      description: Subject listed major,
                    },
                  name:
                    {
                      example: Matematika,
                      type: string,
                      description: Subject name,
                    },
                  subject_code:
                    { example: MTK, type: string, description: Subject code },
                  subject_type:
                    {
                      enum: [SUBJECT_GENERAL, SUBJECT_MAJOR, SUBJECT_SELECTIVE],
                      type: string,
                      description: Subject type,
                      format: enum,
                    },
                  description: { type: string, description: Description },
                  instance_id: { type: string, description: Instance ID },
                },
            },
          publicGetSubjectListResponse:
            {
              type: object,
              properties:
                {
                  subjects:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedSubject",
                        },
                      description: Subject group List,
                    },
                  meta:
                    { $ref: "#/components/schemas/v1ResponseMetadata" },
                },
            },
          publicUpdateSubjectRequest:
            {
              type: object,
              properties:
                {
                  id: { example: 123, type: string, description: Subject ID },
                  teacher_id:
                    { example: 123, type: string, description: Teacher ID },
                  grade_level:
                    {
                      example: 1,
                      type: string,
                      description: Subject Grade Level,
                    },
                  major:
                    {
                      example: [IPA, IPS, BAHASA],
                      type: array,
                      items: { type: string },
                      description: Subject listed major,
                    },
                  name:
                    {
                      example: Matematika,
                      type: string,
                      description: Subject name,
                    },
                  subject_code:
                    { example: MTK, type: string, description: Subject code },
                  subject_type:
                    {
                      enum: [SUBJECT_GENERAL, SUBJECT_MAJOR, SUBJECT_SELECTIVE],
                      type: string,
                      description: Subject type,
                      format: enum,
                    },
                  description: { type: string, description: Description },
                },
            },
          publicAddStudentToClassRequest:
            {
              type: object,
              properties:
                {
                  class_id:
                    { example: 123, type: string, description: Class ID },
                  students:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/publicStudentClass",
                        },
                    },
                },
            },
          publicAddStudentToClassResponse:
            {
              type: object,
              properties:
                {
                  message:
                    {
                      example: Success adding student,
                      type: string,
                      description: response info,
                    },
                },
            },
          publicCreateClassGroupRequest:
            {
              type: object,
              properties:
                {
                  name:
                    {
                      example: Class Group 123,
                      type: string,
                      description: ClassGroup name,
                    },
                  grade_level:
                    { example: 1, type: string, description: Grade Level },
                  major:
                    { example: IPA, type: string, description: Class major },
                  curriculum_id:
                    { type: string, description: ID of curriculum },
                  homeroom_teacher: { type: string, description: Teacher ID },
                  group_subject_id:
                    { type: string, description: Group subject ID },
                  instance_id: { type: string, description: Instance ID },
                  type:
                    {
                      enum: [CLASS_DEFAULT, CLASS_GENERAL, CLASS_COMBINED],
                      type: string,
                      description: GENERAL/SELECTION,
                      format: enum,
                    },
                  class_subjects:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedClassSubjectDetailPayload",
                        },
                      description: Component of class,
                    },
                },
            },
          publicGetClassGroupDetailResponse:
            {
              type: object,
              properties:
                {
                  class_group:
                    {
                      $ref: "#/components/schemas/sharedClassGroup",
                    },
                  class_subjects:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedClassSubjectDetail",
                        },
                      description: list of class subjects,
                    },
                },
            },
          publicGetClassGroupListResponse:
            {
              type: object,
              properties:
                {
                  class_group:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedClassGroup",
                        },
                      description: Class group List,
                    },
                  meta:
                    { $ref: "#/components/schemas/v1ResponseMetadata" },
                },
            },
          publicGetClassSubjectDetailsResponse:
            {
              type: object,
              properties:
                {
                  class_subjects:
                    {
                      $ref: "#/components/schemas/sharedClassSubjectDetail",
                    },
                },
            },
          publicGetStudentClassesResponse:
            {
              type: object,
              properties:
                {
                  class_group:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedClassGroup",
                        },
                      description: Class group List,
                    },
                },
            },
          publicGetStudentCoursesResponse:
            {
              type: object,
              properties:
                {
                  courses:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedStudentCourse",
                        },
                      description: list of class subjects,
                    },
                },
            },
          publicGetStudentsInClassResponse:
            {
              type: object,
              properties:
                {
                  students:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/publicStudentDetailResponse",
                        },
                    },
                },
            },
          publicGetTeacherActiveSubjectsResponse:
            {
              type: object,
              properties:
                {
                  courses:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedTeacherClassCourses",
                        },
                      description: list of class subjects,
                    },
                },
            },
          publicGetTeacherClassesResponse:
            {
              type: object,
              properties:
                {
                  class_group:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedClassGroup",
                        },
                      description: Class group List,
                    },
                },
            },
          publicGetTeacherCoursesStatsResponse:
            {
              type: object,
              properties:
                {
                  data:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/publicGetTeacherCoursesStatsResponseStats",
                        },
                    },
                  meta:
                    { $ref: "#/components/schemas/v1ResponseMetadata" },
                },
            },
          publicGetTeacherCoursesStatsResponseStats:
            {
              type: object,
              properties:
                {
                  title:
                    {
                      example: Mathematics,
                      type: string,
                      description: Quiz Title,
                    },
                  subject:
                    {
                      example: Mathematics,
                      type: string,
                      description: Subject Title,
                    },
                  class_name:
                    {
                      example: Class Group 123,
                      type: string,
                      description: Class Name,
                    },
                  teaching_module:
                    {
                      example: Mathematics,
                      type: string,
                      description: Teaching Module,
                    },
                  due_date:
                    {
                      example: "2024-01-01T00:00:00Z",
                      type: string,
                      description: Due Date,
                    },
                  total_assigned:
                    { example: 10, type: string, description: Total Assigned },
                  total_completed:
                    { example: 5, type: string, description: Total Completed },
                  total_graded:
                    { example: 5, type: string, description: Total Graded },
                },
            },
          publicRemoveStudentFromClassResponse:
            {
              type: object,
              properties:
                {
                  message:
                    {
                      example: Success deleting student,
                      type: string,
                      description: response info,
                    },
                },
            },
          publicStudentClass:
            {
              type: object,
              properties:
                {
                  student_id:
                    { example: 123, type: string, description: Student ID },
                  student_name:
                    { example: 123, type: string, description: Student Name },
                },
            },
          publicStudentDetailResponse:
            {
              type: object,
              properties:
                {
                  user_id:
                    {
                      type: string,
                      description: Student Registered user profile,
                    },
                  student_id:
                    {
                      type: string,
                      description: National registered student number,
                    },
                  instance_id:
                    {
                      type: string,
                      description: ID of Instance where student is registered,
                    },
                  instance_name:
                    {
                      type: string,
                      description: Name of Instance where student is registered,
                    },
                  status:
                    {
                      enum:
                        [
                          STUDENT_STATUS_UNSPECIFIED,
                          STUDENT_STATUS_ACTIVE,
                          STUDENT_STATUS_INACTIVE,
                          STUDENT_STATUS_ALUMNI,
                        ],
                      type: string,
                      description: Status of student,
                      format: enum,
                    },
                  student_name:
                    {
                      example: John F. Doe,
                      type: string,
                      description: User full name,
                    },
                  username:
                    {
                      example: JohnFD,
                      type: string,
                      description: User username,
                    },
                  phone_number:
                    {
                      example: +628790909321,
                      type: string,
                      description: User phone number,
                    },
                  email:
                    {
                      example: john.fd@gmail.com,
                      type: string,
                      description: User email,
                    },
                  profile_pic:
                    {
                      example: profile.png,
                      type: string,
                      description: User profile pict name,
                    },
                  address:
                    {
                      $ref: "#/components/schemas/sharedAddress",
                    },
                  created_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when user is created,
                      format: date-time,
                    },
                  updated_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when user data updated,
                      format: date-time,
                    },
                },
            },
          publicUpdateClassGroupRequest:
            {
              type: object,
              properties:
                {
                  id:
                    { example: 123, type: string, description: ClassGroup ID },
                  name:
                    {
                      example: Class Group 123,
                      type: string,
                      description: ClassGroup name,
                    },
                  grade_level:
                    { example: 1, type: string, description: Grade Level },
                  major:
                    { example: IPA, type: string, description: Class major },
                  curriculum_id:
                    { type: string, description: ID of curriculum },
                  homeroom_teacher: { type: string, description: Teacher ID },
                  instance_id: { type: string, description: Instance ID },
                  type:
                    {
                      enum: [CLASS_DEFAULT, CLASS_GENERAL, CLASS_COMBINED],
                      type: string,
                      description: GENERAL/SELECTION,
                      format: enum,
                    },
                  class_subjects:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedClassSubjectDetailPayload",
                        },
                      description: Component of class,
                    },
                },
            },
          publicUpdateClassGroupResponse:
            {
              type: object,
              properties:
                {
                  class_group:
                    {
                      $ref: "#/components/schemas/sharedClassGroup",
                    },
                  class_subjects:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedClassSubjectDetail",
                        },
                      description: list of class subjects,
                    },
                },
            },
          sharedClassGroup:
            {
              type: object,
              properties:
                {
                  id:
                    { example: 123, type: string, description: ClassGroup ID },
                  name:
                    {
                      example: Class Group 123,
                      type: string,
                      description: ClassGroup name,
                    },
                  grade_level:
                    { example: 1, type: string, description: Grade Level },
                  major:
                    { example: IPA, type: string, description: Class major },
                  curriculum_id:
                    { type: string, description: ID of curriculum },
                  homeroom_teacher: { type: string, description: Teacher ID },
                  group_subject_id:
                    { type: string, description: Group subject ID },
                  instance_id: { type: string, description: Instance ID },
                  type:
                    {
                      enum: [CLASS_DEFAULT, CLASS_GENERAL, CLASS_COMBINED],
                      type: string,
                      description: GENERAL/COMBINED,
                      format: enum,
                    },
                  created_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when Curriculum is created,
                      format: date-time,
                    },
                  updated_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when Curriculum data updated,
                      format: date-time,
                    },
                },
            },
          sharedClassSubjectDetail:
            {
              type: object,
              properties:
                {
                  id:
                    {
                      example: 123,
                      type: string,
                      description: ClassSubjectDetail ID,
                    },
                  classgroup_id:
                    { example: 123, type: string, description: Classgroup ID },
                  subject_id:
                    { example: 123, type: string, description: Subject ID },
                  homeroom_teacher_id:
                    { example: 123, type: string, description: teacher ID },
                  subject_name:
                    {
                      example: Matematika,
                      type: string,
                      description: Subject name,
                    },
                  index_minimum:
                    {
                      type: integer,
                      description: Index Minimum,
                      format: uint32,
                    },
                  meetings_per_week:
                    {
                      type: integer,
                      description: Subject meetings per week,
                      format: uint32,
                    },
                  lesson_hours_per_week:
                    {
                      type: integer,
                      description: Lesson Hours per week,
                      format: uint32,
                    },
                  lesson_minutes:
                    {
                      type: integer,
                      description: Lesson minutes,
                      format: uint32,
                    },
                  subject_type:
                    {
                      enum: [SUBJECT_GENERAL, SUBJECT_MAJOR, SUBJECT_SELECTIVE],
                      type: string,
                      description: Subject type,
                      format: enum,
                    },
                  created_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when Curriculum is created,
                      format: date-time,
                    },
                  updated_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when Curriculum data updated,
                      format: date-time,
                    },
                },
            },
          sharedStudentCourse:
            {
              type: object,
              properties:
                {
                  id:
                    {
                      example: 123,
                      type: string,
                      description: ClassCourses ID,
                    },
                  classgroup_id:
                    { example: 123, type: string, description: Classgroup ID },
                  subject_id:
                    { example: 123, type: string, description: Subject ID },
                  homeroom_teacher_id:
                    { example: 123, type: string, description: teacher ID },
                  subject_name:
                    {
                      example: Matematika,
                      type: string,
                      description: Subject name,
                    },
                  classgroup_name:
                    {
                      example: Class Group 123,
                      type: string,
                      description: Classgroup name,
                    },
                  major:
                    { example: IPA, type: string, description: Class major },
                  class_subject_id:
                    {
                      example: 1231244,
                      type: string,
                      description: Class subject id,
                    },
                },
            },
          sharedTeacherClassCourses:
            {
              type: object,
              properties:
                {
                  id:
                    {
                      example: 123,
                      type: string,
                      description: ClassCourses ID,
                    },
                  classgroup_id:
                    { example: 123, type: string, description: Classgroup ID },
                  subject_id:
                    { example: 123, type: string, description: Subject ID },
                  homeroom_teacher_id:
                    { example: 123, type: string, description: teacher ID },
                  subject_name:
                    {
                      example: Matematika,
                      type: string,
                      description: Subject name,
                    },
                  classgroup_name:
                    {
                      example: Class Group 123,
                      type: string,
                      description: Classgroup name,
                    },
                  total_students: { type: string, description: Total students },
                  major:
                    { example: IPA, type: string, description: Class major },
                  class_subject_id:
                    {
                      example: 1231244,
                      type: string,
                      description: Class subject id,
                    },
                },
            },
          sharedAddress:
            {
              type: object,
              properties:
                {
                  street: { type: string },
                  city: { type: string },
                  state: { type: string },
                  country: { type: string },
                  postal_code: { type: string },
                },
              description: "*\n Represents user's address",
            },
          publicCreateCurriculumGroupComponentRequest:
            {
              type: object,
              properties:
                {
                  curriculum_group_component:
                    {
                      $ref: "#/components/schemas/sharedCurriculumGroupComponent",
                    },
                },
            },
          publicCurriculumGroupComponentResponse:
            {
              type: object,
              properties:
                {
                  message:
                    {
                      type: string,
                      description: message for curriculum group component,
                    },
                },
            },
          publicGetCurriculumGroupComponentResponse:
            {
              type: object,
              properties:
                {
                  components:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedCurriculumGroupComponent",
                        },
                    },
                },
            },
          publicUpdateCurriculumGroupComponentRequest:
            {
              type: object,
              properties:
                {
                  curriculum_group_component:
                    {
                      $ref: "#/components/schemas/sharedCurriculumGroupComponent",
                    },
                },
            },
        },
      responses:
        {
          "500":
            {
              description: Internal Server Error,
              content:
                {
                  application/json:
                    {
                      schema:
                        {
                          $ref: "#/components/schemas/v1ErrorResponse",
                        },
                    },
                },
            },
          "401":
            {
              description: Unauthorized JWT token.,
              content:
                {
                  application/json:
                    {
                      schema:
                        {
                          $ref: "#/components/schemas/v1ErrorResponse",
                        },
                    },
                },
            },
        },
      securitySchemes:
        { OAuth2: { type: http, scheme: bearer, bearerFormat: JWT } },
    },
  security: [{ OAuth2: [ADMIN] }],
}
