# Generated with gnostic protoc-gen-openapi
{
  openapi: 3.0.3,
  info:
    {
      title: Authentication Domain,
      description: "Skoola Permission Service, Skoola Auth Service, Skoola Identity Service",
      version: v1,
    },
  paths:
    {
      /v1/permission:
        {
          get:
            {
              tags: [PermissionService],
              summary: Get List of Permission,
              description: Get List of Permission. Can be accessed by admin only.,
              operationId: PermissionService_ListPermission,
              parameters:
                [
                  {
                    name: permission_id,
                    in: query,
                    description: id of permission,
                    schema: { type: string },
                  },
                  {
                    name: limit,
                    in: query,
                    description: limit of permission to return,
                    schema: { type: integer, format: int32 },
                  },
                  {
                    name: cursor,
                    in: query,
                    description: cursor of pagination,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/serviceListPermissionResponse",
                                },
                            },
                        },
                    },
                },
            },
          post:
            {
              tags: [PermissionService],
              summary: "Create Permission for supplied Permission ID, Action and Resource Name",
              description: Create Permission and action. Can be accessed by admin only.,
              operationId: PermissionService_CreatePermission,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/serviceCreatePermissionRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/serviceCreatePermissionResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/permission/users/{permission_id}/{user_id}":
        {
          post:
            {
              tags: [PermissionService],
              summary: Unassign Permission from User,
              description: Unassign Permission from User. Can be accessed by admin only.,
              operationId: PermissionService_UnassignUserPermission,
              parameters:
                [
                  {
                    name: permission_id,
                    in: path,
                    description: id of permission to unassign,
                    required: true,
                    schema: { type: string },
                  },
                  {
                    name: user_id,
                    in: path,
                    description: user of id,
                    required: true,
                    schema: { type: string },
                  },
                ],
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/serviceUnassignUserPermissionRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/serviceUnassignUserPermissionResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/permission/users/{user_id}":
        {
          post:
            {
              tags: [PermissionService],
              summary: Assign Permission to User,
              description: Assign Permission to User. Can be accessed by admin only.,
              operationId: PermissionService_AssignUserPermission,
              parameters:
                [
                  {
                    name: user_id,
                    in: path,
                    description: id of user,
                    required: true,
                    schema: { type: string },
                  },
                ],
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/serviceAssignUserPermissionRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/serviceAssignUserPermissionResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/permission/{permission_id}":
        {
          delete:
            {
              tags: [PermissionService],
              summary: "Delete Permission for supplied Permission ID, Action and Resource Name",
              description: Delete Permission. Can be accessed by admin only.,
              operationId: PermissionService_DeletePermission,
              parameters:
                [
                  {
                    name: permission_id,
                    in: path,
                    description: id of permission,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/serviceDeletePermissionResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/auth/login:
        {
          post:
            {
              tags: [AuthService],
              summary: Logging in User by supported Authentication Factor,
              description: "Logging in User by supported Authentication Factor, 'password' for password login flow and 'otp_key' for passwordless login flow.",
              operationId: AuthService_Login,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/serviceLoginRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/serviceLoginResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/auth/logout:
        {
          post:
            {
              tags: [AuthService],
              summary: Logging out User,
              description: Logging out User by invalidating provided access token. Only client that use the provided token will be logged out.,
              operationId: AuthService_Logout,
              parameters:
                [
                  {
                    name: user_access_token,
                    in: query,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/serviceLogoutResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/identity:
        {
          post:
            {
              tags: [IdentityService],
              summary: Register New User,
              description: register new user.,
              operationId: IdentityService_Register,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/serviceRegisterRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/serviceRegisterResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/identity/{user_id}":
        {
          get:
            {
              tags: [IdentityService],
              summary: Get user by the given user ID,
              description: Get user by the given user ID,
              operationId: IdentityService_GetUserById,
              parameters:
                [
                  {
                    name: user_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/serviceGetUserByIdResponse",
                                },
                            },
                        },
                    },
                },
            },
          delete:
            {
              tags: [IdentityService],
              summary: Delete user of given user ID,
              description: Delete user of given user ID,
              operationId: IdentityService_DeleteUser,
              parameters:
                [
                  {
                    name: user_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/serviceDeleteUserResponse",
                                },
                            },
                        },
                    },
                },
            },
          patch:
            {
              tags: [IdentityService],
              summary: Update user attribute of given ID,
              description: Update user atribute of given ID,
              operationId: IdentityService_UpdateUser,
              parameters:
                [
                  {
                    name: user_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/serviceUpdateUserRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/serviceUpdateUserResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
    },
  "components":
    {
      "schemas":
        {
          v1CursorPagination:
            {
              type: object,
              properties:
                {
                  limit: { type: integer, format: uint32 },
                  next_cursor: { type: string },
                  prev_cursor: { type: string },
                  curr_cursor: { type: string },
                },
            },
          v1OffsetPagination:
            {
              type: object,
              properties:
                {
                  limit: { type: integer, format: uint32 },
                  offset: { type: integer, format: uint32 },
                  total: { type: integer, format: uint32 },
                },
            },
          v1ResponseMetadata:
            {
              type: object,
              properties:
                {
                  offset_pagination:
                    { $ref: "#/components/schemas/v1OffsetPagination" },
                  cursor_pagination:
                    { $ref: "#/components/schemas/v1CursorPagination" },
                },
            },
          serviceAssignUserPermissionRequest:
            {
              type: object,
              properties:
                {
                  user_id: { type: string, description: id of user },
                  permission_id:
                    { type: string, description: id of rule to be assigned },
                },
              description: Request body of AssignPermission,
            },
          serviceAssignUserPermissionResponse:
            {
              type: object,
              properties:
                {
                  message:
                    {
                      type: string,
                      description: message if permission is assigned to user,
                    },
                },
              description: Response body of AssignUserPermission,
            },
          serviceCreatePermissionRequest:
            {
              type: object,
              properties:
                {
                  action: { type: string, description: action },
                  resource_name: { type: string, description: resource name },
                  display_name: { type: string, description: display name },
                },
              description: Request body of CreatePermission,
            },
          serviceCreatePermissionResponse:
            {
              type: object,
              properties:
                {
                  message: { type: string, description: additional message },
                  permission:
                    {
                      allOf:
                        [
                          {
                            $ref: "#/components/schemas/sharedPermission",
                          },
                        ],
                      description: created permission data,
                    },
                },
              description: Response body of CreatePermission,
            },
          serviceDeletePermissionResponse:
            {
              type: object,
              properties:
                {
                  message:
                    {
                      type: string,
                      description: message if permission is successfully deleted from permission,
                    },
                },
              description: Response body of DeletePermission,
            },
          serviceListPermissionResponse:
            {
              type: object,
              properties:
                {
                  permission:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedPermission",
                        },
                      description: permission data,
                    },
                  meta:
                    {
                      allOf:
                        [
                          {
                            $ref: "#/components/schemas/v1ResponseMetadata",
                          },
                        ],
                      description: metadata,
                    },
                },
              description: Response body of ListPermission,
            },
          serviceUnassignUserPermissionRequest:
            {
              type: object,
              properties:
                {
                  permission_id:
                    { type: string, description: id of permission to unassign },
                  user_id: { type: string, description: user of id },
                },
              description: Request body of UnassignUserPermission,
            },
          serviceUnassignUserPermissionResponse:
            {
              type: object,
              properties:
                {
                  message:
                    {
                      type: string,
                      description: message ig permission is unassigned from user,
                    },
                },
              description: Response body of UnassignUserPermission,
            },
          sharedPermission:
            {
              type: object,
              properties:
                {
                  action: { type: string, description: action },
                  resource_name: { type: string, description: resource name },
                  permission_id: { type: string, description: id },
                  display_name: { type: string, description: display name },
                  created_at:
                    {
                      type: string,
                      description: when permission is created,
                      format: date-time,
                    },
                  updated_at:
                    {
                      type: string,
                      description: when permission is updated,
                      format: date-time,
                    },
                },
              description: Permission entity,
            },
          "v1ErrorResponse":
            {
              "type": "object",
              "properties":
                {
                  "errors":
                    {
                      "title": "errors",
                      "type": "array",
                      "items":
                        { "$ref": "#/components/schemas/v1ErrorInfo" },
                    },
                },
            },
          "v1ErrorInfo":
            {
              "type": "object",
              "properties":
                {
                  "message": { "title": "message", "type": "string" },
                  "code": { "title": "code", "type": "string" },
                  "field": { "title": "field", "type": "string" },
                },
            },
          serviceLoginRequest:
            {
              type: object,
              properties:
                {
                  email:
                    {
                      example: john.fd@gmail.com,
                      type: string,
                      description: User email,
                    },
                  password: { type: string, description: User Password },
                },
            },
          serviceLoginResponse:
            {
              type: object,
              properties:
                {
                  message:
                    { type: string, description: additional information },
                  login_entity:
                    {
                      $ref: "#/components/schemas/sharedLoginEntity",
                    },
                  redirect_to:
                    {
                      type: string,
                      description: url redirection when login is success or fail,
                    },
                },
              description: Response body of Login,
            },
          serviceLogoutResponse:
            {
              type: object,
              properties:
                {
                  message:
                    { type: string, description: message if logout is success },
                },
              description: Response body of Logout,
            },
          sharedLoginEntity:
            {
              type: object,
              properties:
                {
                  user:
                    {
                      allOf:
                        [
                          {
                            $ref: "#/components/schemas/sharedUser",
                          },
                        ],
                      description: user data,
                    },
                  session_token: { type: string, description: session token },
                },
              description: Login entity,
            },
          sharedUser:
            {
              type: object,
              properties:
                {
                  user_id: { example: 123, type: string, description: User ID },
                  fullname:
                    {
                      example: John F. Doe,
                      type: string,
                      description: User full name,
                    },
                  username:
                    {
                      example: JohnFD,
                      type: string,
                      description: User username,
                    },
                  phone_number:
                    {
                      example: +628790909321,
                      type: string,
                      description: User phone number,
                    },
                  email:
                    {
                      example: john.fd@gmail.com,
                      type: string,
                      description: User email,
                    },
                  instance_id:
                    { type: string, description: Represent school/instance },
                  status:
                    {
                      enum:
                        [
                          USER_STATUS_UNSPECIFIED,
                          USER_STATUS_ACTIVE,
                          USER_STATUS_INACTIVE,
                        ],
                      type: string,
                      description: Represent user status,
                      format: enum,
                    },
                  created_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when user is created,
                      format: date-time,
                    },
                  updated_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when user data updated,
                      format: date-time,
                    },
                },
              description: User entity,
            },
          serviceDeleteUserResponse:
            {
              type: object,
              properties:
                { message: { type: string, description: additional message } },
              description: Response body of DeleteUser,
            },
          serviceGetUserByIdResponse:
            {
              type: object,
              properties:
                {
                  user:
                    {
                      $ref: "#/components/schemas/sharedUser",
                    },
                },
              description: Response body of GetUserById,
            },
          serviceRegisterRequest:
            {
              type: object,
              properties:
                {
                  fullname:
                    {
                      example: John F. Doe,
                      type: string,
                      description: User full name,
                    },
                  phone_number:
                    {
                      example: +628790909321,
                      type: string,
                      description: User phone number,
                    },
                  username: { type: string, description: Username },
                  email:
                    {
                      example: john.fd@gmail.com,
                      type: string,
                      description: User email,
                    },
                  password: { type: string, description: User Password },
                  login_challenge:
                    {
                      type: string,
                      description: " login challenge from auth-server",
                    },
                },
              description: Request body of Register new user,
            },
          serviceRegisterResponse:
            {
              type: object,
              properties:
                {
                  message: { type: string, description: additional message },
                  user:
                    {
                      $ref: "#/components/schemas/sharedUser",
                    },
                  token:
                    {
                      type: string,
                      description: generated token after registered,
                    },
                },
              description: Response body of Register new user,
            },
          serviceUpdateUserRequest:
            {
              type: object,
              properties:
                {
                  user_id:
                    {
                      type: string,
                      description: id of user that who made changes to information,
                    },
                  fullname: { type: string, description: new fullname },
                  username: { type: string, description: new username },
                  phone_number: { type: string, description: new phone number },
                  email: { type: string, description: new email },
                  status:
                    {
                      enum:
                        [
                          USER_STATUS_UNSPECIFIED,
                          USER_STATUS_ACTIVE,
                          USER_STATUS_INACTIVE,
                        ],
                      type: string,
                      description: new status,
                      format: enum,
                    },
                  update_mask:
                    {
                      type: string,
                      description: update_mask specify which field in order to be updated.,
                      format: field-mask,
                    },
                },
              description: Request body of UpdateUser,
            },
          serviceUpdateUserResponse:
            {
              type: object,
              properties:
                { message: { type: string, description: additional message } },
              description: Response body of UpdateUser,
            },
        },
    },
}
