# Generated with gnostic protoc-gen-openapi
{
  openapi: 3.0.3,
  info:
    {
      title: Authentication Domain,
      version: v1,
      description: "Skoola Auth Service, Skoola Identity Service, Skoola Admin User Service",
    },
  paths:
    {
      /v1/auth/login:
        {
          post:
            {
              tags: [AuthService],
              summary: Logging in User by supported Authentication Factor,
              description: "Logging in User by supported Authentication Factor, 'password' for password login flow and 'otp_key' for passwordless login flow.",
              operationId: AuthService_Login,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicLoginRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicLoginResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/auth/logout:
        {
          post:
            {
              tags: [AuthService],
              summary: Logging out User,
              description: Logging out User by invalidating provided access token. Only client that use the provided token will be logged out.,
              operationId: AuthService_Logout,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicLogoutRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicLogoutResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/auth/refresh:
        {
          post:
            {
              tags: [AuthService],
              summary: Refresh Expired Token,
              description: Extending user expired token,
              operationId: AuthService_RefreshToken,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicRefreshTokenRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicRefreshTokenResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/auth/reset_password:
        {
          post:
            {
              tags: [AuthService],
              summary: Reset Password,
              description: Reset user password,
              operationId: AuthService_ResetPassword,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicResetPasswordRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicResetPasswordResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/identity/register:
        {
          post:
            {
              tags: [IdentityService],
              summary: Register New User,
              description: register new user.,
              operationId: IdentityService_Register,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicRegisterRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicRegisterResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/user/admin:
        {
          post:
            {
              tags: [AdminUserService],
              summary: Register new user,
              description: Admin register a new user,
              operationId: AdminUserService_RegisterUser,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicRegisterUserRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicRegisterUserResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
    },
  "components":
    {
      "schemas":
        {
          publicLoginRequest:
            {
              type: object,
              properties:
                {
                  email:
                    {
                      example: john.fd@gmail.com,
                      type: string,
                      description: User email,
                    },
                  password: { type: string, description: User Password },
                },
            },
          publicLoginResponse:
            {
              type: object,
              properties:
                {
                  message:
                    { type: string, description: additional information },
                  login_entity:
                    {
                      $ref: "#/components/schemas/sharedLoginEntity",
                    },
                  redirect_to:
                    {
                      type: string,
                      description: url redirection when login is success or fail,
                    },
                },
              description: Response body of Login,
            },
          publicLogoutRequest:
            {
              type: object,
              properties:
                {
                  user_access_token:
                    {
                      type: string,
                      description: access token of user to be invalidated,
                    },
                },
              description: Request body of Logout,
            },
          publicLogoutResponse:
            {
              type: object,
              properties:
                {
                  message:
                    { type: string, description: message if logout is success },
                },
              description: Response body of Logout,
            },
          publicRefreshTokenRequest:
            {
              type: object,
              properties:
                {
                  user_access_token:
                    {
                      type: string,
                      description: access token of user to be invalidated,
                    },
                },
            },
          publicRefreshTokenResponse:
            {
              type: object,
              properties:
                {
                  user_access_token:
                    {
                      type: string,
                      description: access token of user to be invalidated,
                    },
                },
            },
          publicResetPasswordRequest:
            {
              type: object,
              properties:
                {
                  key: { type: string, description: a key received from email },
                  current_password:
                    { type: string, description: User Password },
                  new_password:
                    { type: string, description: User new Password },
                },
            },
          publicResetPasswordResponse:
            {
              type: object,
              properties:
                {
                  message:
                    { type: string, description: additional information },
                },
            },
          sharedAddress:
            {
              type: object,
              properties:
                {
                  address_line_1: { type: string, description: address detail },
                  address_line_2: { type: string, description: address detail },
                  ADMINISTRATORistrative_area_level_1:
                    { type: string, description: province / provinsi },
                  ADMINISTRATORistrative_area_level_2:
                    { type: string, description: city / kota },
                  ADMINISTRATORistrative_area_level_3:
                    { type: string, description: area / kecamatan },
                  ADMINISTRATORistrative_area_level_4:
                    { type: string, description: district / kelurahan },
                  postal_code:
                    { type: string, description: postal code / kode pos },
                  latitude:
                    {
                      type: string,
                      description: stored latitude coordinate in decimal,
                    },
                  longitude:
                    {
                      type: string,
                      description: stored longitude coordinate in decimal,
                    },
                },
              description: "*\n Represents user's address",
            },
          sharedLoginEntity:
            {
              type: object,
              properties:
                {
                  user:
                    {
                      allOf:
                        [
                          {
                            $ref: "#/components/schemas/sharedUser",
                          },
                        ],
                      description: user data,
                    },
                  session_token: { type: string, description: session token },
                },
              description: Login entity,
            },
          sharedUser:
            {
              type: object,
              properties:
                {
                  id: { example: 123, type: string, description: User ID },
                  fullname:
                    {
                      example: John F. Doe,
                      type: string,
                      description: User full name,
                    },
                  username:
                    {
                      example: JohnFD,
                      type: string,
                      description: User username,
                    },
                  phone_number:
                    {
                      example: +628790909321,
                      type: string,
                      description: User phone number,
                    },
                  email:
                    {
                      example: john.fd@gmail.com,
                      type: string,
                      description: User email,
                    },
                  profile_pic:
                    {
                      example: profile.png,
                      type: string,
                      description: User profile pict name,
                    },
                  address:
                    {
                      $ref: "#/components/schemas/sharedAddress",
                    },
                  status:
                    {
                      enum:
                        [
                          USER_STATUS_UNSPECIFIED,
                          USER_STATUS_ACTIVE,
                          USER_STATUS_INACTIVE,
                        ],
                      type: string,
                      description: Represent user status,
                      format: enum,
                    },
                  created_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when user is created,
                      format: date-time,
                    },
                  updated_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when user data updated,
                      format: date-time,
                    },
                },
              description: User entity,
            },
          "v1ErrorResponse":
            {
              "type": "object",
              "properties":
                {
                  "errors":
                    {
                      "title": "errors",
                      "type": "array",
                      "items":
                        { "$ref": "#/components/schemas/v1ErrorInfo" },
                    },
                },
            },
          "v1ErrorInfo":
            {
              "type": "object",
              "properties":
                {
                  "message": { "title": "message", "type": "string" },
                  "code": { "title": "code", "type": "string" },
                  "field": { "title": "field", "type": "string" },
                },
            },
          publicRegisterRequest:
            {
              type: object,
              properties:
                {
                  fullname:
                    {
                      example: John F. Doe,
                      type: string,
                      description: User full name,
                    },
                  phone_number:
                    {
                      example: +628790909321,
                      type: string,
                      description: User phone number,
                    },
                  username: { type: string, description: Username },
                  email:
                    {
                      example: john.fd@gmail.com,
                      type: string,
                      description: User email,
                    },
                  password: { type: string, description: User Password },
                  login_challenge:
                    {
                      type: string,
                      description: " login challenge from auth-server",
                    },
                },
              description: Request body of Register new user,
            },
          publicRegisterResponse:
            {
              type: object,
              properties:
                {
                  message: { type: string, description: additional message },
                  user:
                    {
                      $ref: "#/components/schemas/sharedUser",
                    },
                  token:
                    {
                      type: string,
                      description: generated token after registered,
                    },
                },
              description: Response body of Register new user,
            },
          publicRegisterUserRequest:
            {
              type: object,
              properties:
                {
                  fullname:
                    {
                      example: John F. Doe,
                      type: string,
                      description: User full name,
                    },
                  phone_number:
                    {
                      example: +628790909321,
                      type: string,
                      description: User phone number,
                    },
                  username: { type: string, description: Username },
                  email:
                    {
                      example: john.fd@gmail.com,
                      type: string,
                      description: User email,
                    },
                  register_as:
                    {
                      example: student,
                      enum:
                        [
                          UNSPECIFIED,
                          STUDENT,
                          PARENT,
                          TEACHER,
                          STAFF,
                          ADMINISTRATOR,
                          SUPERADMINISTRATOR,
                        ],
                      type: string,
                      description: registered user role,
                      format: enum,
                    },
                  instance_id:
                    {
                      example: 123455,
                      type: string,
                      description: registered user instance,
                    },
                  nisn:
                    {
                      example: 123455,
                      type: string,
                      description: required if user is student,
                    },
                  nip:
                    {
                      example: 123455,
                      type: string,
                      description: required if user is teacher,
                    },
                  password: { type: string, description: User Password },
                },
              description: Request body of Register new user,
            },
          publicRegisterUserResponse:
            {
              type: object,
              properties:
                {
                  user:
                    {
                      $ref: "#/components/schemas/sharedUser",
                    },
                },
            },
        },
      responses:
        {
          "500":
            {
              description: Internal Server Error,
              content:
                {
                  application/json:
                    {
                      schema:
                        {
                          $ref: "#/components/schemas/v1ErrorResponse",
                        },
                    },
                },
            },
          "401":
            {
              description: Unauthorized JWT token.,
              content:
                {
                  application/json:
                    {
                      schema:
                        {
                          $ref: "#/components/schemas/v1ErrorResponse",
                        },
                    },
                },
            },
        },
      securitySchemes:
        { OAuth2: { type: http, scheme: bearer, bearerFormat: JWT } },
    },
  servers: [{ url: "https://staging-api.skola.co.id" }],
  security: [{ OAuth2: [ADMIN] }],
}
