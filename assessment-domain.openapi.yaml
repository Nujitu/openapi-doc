# Generated with gnostic protoc-gen-openapi
{
  openapi: 3.0.3,
  info:
    {
      title: Assessment Domain,
      description: "Skoola Observation Service, Skoola Assignment Service",
      version: v1,
    },
  servers: [{ url: "https://api.stg.skola.com" }],
  paths:
    {
      /v1/observation:
        {
          post:
            {
              tags: [ObservationService],
              summary: Create an observation,
              description: Create an observation,
              operationId: ObservationService_CreateObservation,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicCreateObservationRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicCreateObservationResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
          patch:
            {
              tags: [ObservationService],
              summary: Update an observation,
              description: Update an observation,
              operationId: ObservationService_UpdateObservation,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicUpdateObservationRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicUpdateObservationResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/observation/list/teaching-module-folder/{teaching_module_folder_id}":
        {
          get:
            {
              tags: [ObservationService],
              summary: List observations,
              description: List observations by teaching module folder id,
              operationId: ObservationService_ListObservationByTeachingModuleId,
              parameters:
                [
                  {
                    name: teaching_module_folder_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicListObservationByTeachingModuleIdResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/observation/{observation_id}":
        {
          get:
            {
              tags: [ObservationService],
              summary: Get an observation,
              description: Get observation by id,
              operationId: ObservationService_GetObservationById,
              parameters:
                [
                  {
                    name: observation_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetObservationByIdResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
          delete:
            {
              tags: [ObservationService],
              summary: Delete an observation,
              description: Delete an observation,
              operationId: ObservationService_DeleteObservation,
              parameters:
                [
                  {
                    name: observation_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicDeleteObservationResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/assignment:
        {
          post:
            {
              tags: [AssignmentService],
              summary: Create an assignment,
              description: Create an assignment,
              operationId: AssignmentService_CreateAssignment,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicCreateAssignmentRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicCreateAssignmentResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
          patch:
            {
              tags: [AssignmentService],
              summary: Update an assignment,
              description: Update an assignment,
              operationId: AssignmentService_UpdateAssignment,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicUpdateAssignmentRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicUpdateAssignmentResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/assignment/list/teaching-module-folder/{teaching_module_folder_id}":
        {
          get:
            {
              tags: [AssignmentService],
              summary: List assignments,
              description: List assignments by teaching module folder id,
              operationId: AssignmentService_ListAssignmentByTeachingModuleId,
              parameters:
                [
                  {
                    name: teaching_module_folder_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicListAssignmentByTeachingModuleIdResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/assignment/{assignment_id}":
        {
          get:
            {
              tags: [AssignmentService],
              summary: Get an assignment,
              description: Get assignment by id,
              operationId: AssignmentService_GetAssignmentById,
              parameters:
                [
                  {
                    name: assignment_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetAssignmentByIdResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
          delete:
            {
              tags: [AssignmentService],
              summary: Delete an assignment,
              description: Delete an assignment,
              operationId: AssignmentService_DeleteAssignment,
              parameters:
                [
                  {
                    name: assignment_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicDeleteAssignmentResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
    },
  "components":
    {
      "schemas":
        {
          publicCreateObservationRequest:
            {
              type: object,
              properties:
                {
                  id:
                    { example: 123, type: string, description: Observation ID },
                  title:
                    {
                      example: Praktek seni musik menggunakan gitar,
                      type: string,
                      description: Observation title,
                    },
                  description:
                    { type: string, description: Observation description },
                  score:
                    {
                      example: 1.0,
                      type: number,
                      description: Observation score,
                      format: float,
                    },
                  learning_goals:
                    {
                      example: [123, 234, 567],
                      type: array,
                      items: { type: string },
                      description: Learning goal IDs related to observation,
                    },
                  publish:
                    { type: boolean, description: Observation publish status },
                  teaching_module_folder_id:
                    {
                      example: 123,
                      type: string,
                      description: Teaching Module Folder ID,
                    },
                },
            },
          publicCreateObservationResponse:
            {
              type: object,
              properties:
                {
                  observation:
                    {
                      $ref: "#/components/schemas/sharedObservation",
                    },
                  message:
                    {
                      type: string,
                      description: response message of creating observation,
                    },
                },
            },
          publicDeleteObservationResponse:
            {
              type: object,
              properties:
                {
                  message:
                    {
                      type: string,
                      description: response message of deleting observation,
                    },
                },
            },
          publicGetObservationByIdResponse:
            {
              type: object,
              properties:
                {
                  observation:
                    {
                      $ref: "#/components/schemas/sharedObservation",
                    },
                },
            },
          publicListObservationByTeachingModuleIdResponse:
            {
              type: object,
              properties:
                {
                  observations:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedObservation",
                        },
                      description: List Observations,
                    },
                },
            },
          publicUpdateObservationRequest:
            {
              type: object,
              properties:
                {
                  id:
                    { example: 123, type: string, description: Observation ID },
                  title:
                    {
                      example: Praktek seni musik menggunakan gitar,
                      type: string,
                      description: Observation title,
                    },
                  description:
                    { type: string, description: Observation description },
                  score:
                    {
                      example: 1.0,
                      type: number,
                      description: Observation score,
                      format: float,
                    },
                  learning_goals:
                    {
                      example: [123, 234, 567, 8910],
                      type: array,
                      items: { type: string },
                      description: Learning goal IDs related to observation,
                    },
                  publish:
                    { type: boolean, description: Observation publish status },
                },
            },
          publicUpdateObservationResponse:
            {
              type: object,
              properties:
                {
                  observation:
                    {
                      $ref: "#/components/schemas/sharedObservation",
                    },
                  message:
                    {
                      type: string,
                      description: response message of updating observation,
                    },
                },
            },
          sharedObservation:
            {
              type: object,
              properties:
                {
                  id:
                    { example: 123, type: string, description: Observation ID },
                  title:
                    {
                      example: Praktek seni musik menggunakan gitar,
                      type: string,
                      description: Observation title,
                    },
                  description:
                    { type: string, description: Observation description },
                  score:
                    {
                      example: 1.0,
                      type: number,
                      description: Observation score,
                      format: float,
                    },
                  learning_goals:
                    {
                      example: [123, 234, 567],
                      type: array,
                      items: { type: string },
                      description: Learning goal IDs related to observation,
                    },
                  publish:
                    { type: boolean, description: Observation publish status },
                  teaching_module_folder_id:
                    {
                      example: 123,
                      type: string,
                      description: Teaching Module Folder ID,
                    },
                  instance_id:
                    { example: 123, type: string, description: Instance ID },
                  created_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when observation is created,
                      format: date-time,
                    },
                  updated_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when observation data updated,
                      format: date-time,
                    },
                },
            },
          "v1ErrorResponse":
            {
              "type": "object",
              "properties":
                {
                  "errors":
                    {
                      "title": "errors",
                      "type": "array",
                      "items":
                        { "$ref": "#/components/schemas/v1ErrorInfo" },
                    },
                },
            },
          "v1ErrorInfo":
            {
              "type": "object",
              "properties":
                {
                  "message": { "title": "message", "type": "string" },
                  "code": { "title": "code", "type": "string" },
                  "field": { "title": "field", "type": "string" },
                },
            },
          publicCreateAssignmentRequest:
            {
              type: object,
              properties:
                {
                  id:
                    { example: 123, type: string, description: Assignment ID },
                  title:
                    {
                      example: Tes Baris dan Deret Aritmatika,
                      type: string,
                      description: Assignment title,
                    },
                  description:
                    { type: string, description: Assignment description },
                  start_date:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Start date when the assignment can be done,
                      format: date-time,
                    },
                  due_date:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Assignment deadline,
                      format: date-time,
                    },
                  until_date:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Available until date,
                      format: date-time,
                    },
                  score:
                    {
                      example: 1.0,
                      type: number,
                      description: Assignment score,
                      format: float,
                    },
                  learning_goals:
                    {
                      example: [123, 234, 567],
                      type: array,
                      items: { type: string },
                      description: Learning goal IDs related to assignment,
                    },
                  publish:
                    { type: boolean, description: Assignment publish status },
                  teaching_module_folder_id:
                    {
                      example: 123,
                      type: string,
                      description: Teaching Module Folder ID,
                    },
                },
            },
          publicCreateAssignmentResponse:
            {
              type: object,
              properties:
                {
                  assignment:
                    {
                      $ref: "#/components/schemas/sharedAssignment",
                    },
                  message:
                    {
                      type: string,
                      description: response message of creating assignment,
                    },
                },
            },
          publicDeleteAssignmentResponse:
            {
              type: object,
              properties:
                {
                  message:
                    {
                      type: string,
                      description: response message of deleting assignment,
                    },
                },
            },
          publicGetAssignmentByIdResponse:
            {
              type: object,
              properties:
                {
                  assignment:
                    {
                      $ref: "#/components/schemas/sharedAssignment",
                    },
                },
            },
          publicListAssignmentByTeachingModuleIdResponse:
            {
              type: object,
              properties:
                {
                  assignments:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedAssignment",
                        },
                      description: List Assignments,
                    },
                },
            },
          publicUpdateAssignmentRequest:
            {
              type: object,
              properties:
                {
                  id:
                    { example: 123, type: string, description: Assignment ID },
                  title:
                    {
                      example: Tes Baris dan Deret Aritmatika,
                      type: string,
                      description: Assignment title,
                    },
                  description:
                    { type: string, description: Assignment description },
                  start_date:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Start date when the assignment can be done,
                      format: date-time,
                    },
                  due_date:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Assignment deadline,
                      format: date-time,
                    },
                  until_date:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Available until date,
                      format: date-time,
                    },
                  score:
                    {
                      example: 1.0,
                      type: number,
                      description: Assignment score,
                      format: float,
                    },
                  learning_goals:
                    {
                      example: [123, 234, 567, 8910],
                      type: array,
                      items: { type: string },
                      description: Learning goal IDs related to assignment,
                    },
                  publish:
                    { type: boolean, description: Assignment publish status },
                },
            },
          publicUpdateAssignmentResponse:
            {
              type: object,
              properties:
                {
                  assignment:
                    {
                      $ref: "#/components/schemas/sharedAssignment",
                    },
                  message:
                    {
                      type: string,
                      description: response message of updating assignment,
                    },
                },
            },
          sharedAssignment:
            {
              type: object,
              properties:
                {
                  id:
                    { example: 123, type: string, description: Assignment ID },
                  title:
                    {
                      example: Tes Baris dan Deret Aritmatika,
                      type: string,
                      description: Assignment title,
                    },
                  description:
                    { type: string, description: Assignment description },
                  start_date:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Start date when the assignment can be done,
                      format: date-time,
                    },
                  due_date:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Assignment deadline,
                      format: date-time,
                    },
                  until_date:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Available until date,
                      format: date-time,
                    },
                  score:
                    {
                      example: 1.0,
                      type: number,
                      description: Assignment score,
                      format: float,
                    },
                  learning_goals:
                    {
                      example: [123, 234, 567],
                      type: array,
                      items: { type: string },
                      description: Learning goal IDs related to assignment,
                    },
                  publish:
                    { type: boolean, description: Assignment publish status },
                  teaching_module_folder_id:
                    {
                      example: 123,
                      type: string,
                      description: Teaching Module Folder ID,
                    },
                  instance_id:
                    { example: 123, type: string, description: Instance ID },
                  created_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when assignment is created,
                      format: date-time,
                    },
                  updated_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when assignment data updated,
                      format: date-time,
                    },
                },
            },
        },
      responses:
        {
          "500":
            {
              description: Internal Server Error,
              content:
                {
                  application/json:
                    {
                      schema:
                        {
                          $ref: "#/components/schemas/v1ErrorResponse",
                        },
                    },
                },
            },
          "401":
            {
              description: Unauthorized JWT token.,
              content:
                {
                  application/json:
                    {
                      schema:
                        {
                          $ref: "#/components/schemas/v1ErrorResponse",
                        },
                    },
                },
            },
        },
      securitySchemes:
        { OAuth2: { type: http, scheme: bearer, bearerFormat: JWT } },
    },
  security: [{ OAuth2: [TEACHER] }],
}
