# Generated with gnostic protoc-gen-openapi
{
  openapi: 3.0.3,
  info:
    {
      title: Assessment Domain,
      description: "Skoola Observation Service, Skoola Rubric Service, Skoola Assignment Service, Skola Quiz Service",
      version: v1,
    },
  servers:
    [
      { url: "https://staging-api.skola.co.id" },
      { url: "http://localhost:8080" },
    ],
  paths:
    {
      /v1/observation:
        {
          get:
            {
              tags: [ObservationService],
              summary: List observations,
              description: List observations,
              operationId: ObservationService_ListObservation,
              parameters:
                [
                  {
                    name: teaching_module_folder_id,
                    in: query,
                    schema: { type: string },
                  },
                  { name: rubric_id, in: query, schema: { type: string } },
                  {
                    name: class_subject_id,
                    in: query,
                    schema: { type: string },
                  },
                  { name: subject_id, in: query, schema: { type: string } },
                  {
                    name: teacher_user_id,
                    in: query,
                    schema: { type: string },
                  },
                  {
                    name: scoring_method,
                    in: query,
                    schema:
                      { enum: [MANUAL, RUBRIC], type: string, format: enum },
                  },
                  {
                    name: observation_type,
                    in: query,
                    schema:
                      {
                        enum: [ASSESSMENT_EMPTY, FORMATIVE, SUMMATIVE, EXAM],
                        type: string,
                        format: enum,
                      },
                  },
                  {
                    name: teaching_module_id,
                    in: query,
                    schema: { type: string },
                  },
                  { name: exam_id, in: query, schema: { type: string } },
                  { name: sort, in: query, schema: { type: string } },
                  {
                    name: limit,
                    in: query,
                    schema: { type: integer, format: uint32 },
                  },
                  {
                    name: offset,
                    in: query,
                    schema: { type: integer, format: uint32 },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicListObservationResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
          post:
            {
              tags: [ObservationService],
              summary: Create an observation,
              description: Create an observation,
              operationId: ObservationService_CreateObservation,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicCreateObservationRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicCreateObservationResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
          patch:
            {
              tags: [ObservationService],
              summary: Update an observation,
              description: Update an observation,
              operationId: ObservationService_UpdateObservation,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicUpdateObservationRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicUpdateObservationResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/observation/detail/{observation_id}":
        {
          get:
            {
              tags: [ObservationService],
              summary: Get an observation,
              description: Get observation by id,
              operationId: ObservationService_GetObservationById,
              parameters:
                [
                  {
                    name: observation_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetObservationByIdResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/observation/statistic/detail/{observation_id}":
        {
          get:
            {
              tags: [ObservationService],
              summary: Get an observation statistic,
              description: Get observation statistic by observation id,
              operationId: ObservationService_GetObservationStatisticById,
              parameters:
                [
                  {
                    name: observation_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetObservationStatisticByIdResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/observation/submission:
        {
          get:
            {
              tags: [ObservationService],
              summary: List observation assessments,
              description: List observation assessments,
              operationId: ObservationService_ListObservationSubmission,
              parameters:
                [
                  { name: observation_id, in: query, schema: { type: string } },
                  {
                    name: student_user_id,
                    in: query,
                    schema: { type: string },
                  },
                  {
                    name: class_subject_id,
                    in: query,
                    schema: { type: string },
                  },
                  {
                    name: submission_state,
                    in: query,
                    schema:
                      {
                        enum:
                          [
                            UNKNOWN_SUBMISSON,
                            NO_SUBMISSION,
                            NEED_GRADING,
                            GRADED,
                          ],
                        type: string,
                        format: enum,
                      },
                  },
                  {
                    name: teaching_module_folder_id,
                    in: query,
                    schema: { type: string },
                  },
                  { name: sort, in: query, schema: { type: string } },
                  {
                    name: limit,
                    in: query,
                    schema: { type: integer, format: uint32 },
                  },
                  {
                    name: offset,
                    in: query,
                    schema: { type: integer, format: uint32 },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicListObservationSubmissionResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
          put:
            {
              tags: [ObservationService],
              summary: Update observation assessment,
              description: Update the submission of an observation assessment.,
              operationId: ObservationService_UpdateObservationSubmission,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicUpdateObservationSubmissionRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicUpdateObservationSubmissionResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
          post:
            {
              tags: [ObservationService],
              summary: Assess observation submission,
              description: Assesss a student observation submission.,
              operationId: ObservationService_CreateObservationSubmission,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicCreateObservationSubmissionRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicCreateObservationSubmissionResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/observation/submission/detail/{submission_id}":
        {
          get:
            {
              tags: [ObservationService],
              summary: Get a submission of observation assessment,
              description: Get observation assessment by observation submission id,
              operationId: ObservationService_GetObservationSubmissionById,
              parameters:
                [
                  {
                    name: submission_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetObservationSubmissionByIdResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/observation/submission/student-id:
        {
          get:
            {
              tags: [ObservationService],
              summary: Get an observation submission by student id,
              description: Get observation assessment by specified student id and observation id,
              operationId: ObservationService_GetObservationSubmissionByStudentUserId,
              parameters:
                [
                  { name: observation_id, in: query, schema: { type: string } },
                  {
                    name: student_user_id,
                    in: query,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetObservationSubmissionByStudentUserIdResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/observation/submission/student-id/bulk:
        {
          get:
            {
              tags: [ObservationService],
              summary: Get bulk observation submission by many student id,
              description: Get bulk observation assessment by specified student ids and observation id,
              operationId: ObservationService_GetBulkObservationSubmissionByStudentUserId,
              parameters:
                [
                  { name: observation_id, in: query, schema: { type: string } },
                  {
                    name: student_user_ids,
                    in: query,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetBulkObservationSubmissionByStudentUserIdResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/observation/submission/{submission_id}":
        {
          delete:
            {
              tags: [ObservationService],
              summary: Delete an observation,
              description: Delete an observation,
              operationId: ObservationService_DeleteObservationSubmission,
              parameters:
                [
                  {
                    name: submission_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicDeleteObservationSubmissionResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/observation/to-review:
        {
          get:
            {
              tags: [ObservationService],
              summary: List observation to review,
              description: This API is used for teachers to see their to-do list for review.,
              operationId: ObservationService_ListObservationToReview,
              parameters:
                [
                  {
                    name: teacher_user_id,
                    in: query,
                    schema: { type: string },
                  },
                  {
                    name: class_subject_id,
                    in: query,
                    schema: { type: string },
                  },
                  { name: sort, in: query, schema: { type: string } },
                  {
                    name: limit,
                    in: query,
                    schema: { type: integer, format: uint32 },
                  },
                  {
                    name: offset,
                    in: query,
                    schema: { type: integer, format: uint32 },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicListObservationToReviewResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/observation/{observation_id}":
        {
          delete:
            {
              tags: [ObservationService],
              summary: Delete an observation,
              description: Delete an observation,
              operationId: ObservationService_DeleteObservation,
              parameters:
                [
                  {
                    name: observation_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicDeleteObservationResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/rubric:
        {
          get:
            {
              tags: [RubricService],
              summary: List rubrics,
              description: List rubrics,
              operationId: RubricService_ListRubric,
              parameters:
                [
                  { name: sort, in: query, schema: { type: string } },
                  {
                    name: limit,
                    in: query,
                    schema: { type: integer, format: uint32 },
                  },
                  {
                    name: offset,
                    in: query,
                    schema: { type: integer, format: uint32 },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicListRubricResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
          put:
            {
              tags: [RubricService],
              summary: Update a rubric,
              description: Update a rubric,
              operationId: RubricService_UpdateRubric,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicUpdateRubricRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicUpdateRubricResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
          post:
            {
              tags: [RubricService],
              summary: Create a rubric,
              description: Create a rubric,
              operationId: RubricService_CreateRubric,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicCreateRubricRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicCreateRubricResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/rubric/detail/{rubric_id}":
        {
          get:
            {
              tags: [RubricService],
              summary: Get a rubric,
              description: Get rubric by id,
              operationId: RubricService_GetRubricById,
              parameters:
                [
                  {
                    name: rubric_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetRubricByIdResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/rubric/{rubric_id}":
        {
          delete:
            {
              tags: [RubricService],
              summary: Delete a rubric,
              description: Delete a rubric,
              operationId: RubricService_DeleteRubric,
              parameters:
                [
                  {
                    name: rubric_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicDeleteRubricResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/assignment:
        {
          get:
            {
              tags: [AssignmentService],
              summary: List assignments,
              description: List assignments,
              operationId: AssignmentService_ListAssignment,
              parameters:
                [
                  {
                    name: available_date_gt,
                    in: query,
                    schema: { type: string, format: date-time },
                  },
                  {
                    name: available_date_gte,
                    in: query,
                    schema: { type: string, format: date-time },
                  },
                  {
                    name: available_date_lt,
                    in: query,
                    schema: { type: string, format: date-time },
                  },
                  {
                    name: available_date_lte,
                    in: query,
                    schema: { type: string, format: date-time },
                  },
                  {
                    name: due_date_gt,
                    in: query,
                    schema: { type: string, format: date-time },
                  },
                  {
                    name: due_date_gte,
                    in: query,
                    schema: { type: string, format: date-time },
                  },
                  {
                    name: due_date_lt,
                    in: query,
                    schema: { type: string, format: date-time },
                  },
                  {
                    name: due_date_lte,
                    in: query,
                    schema: { type: string, format: date-time },
                  },
                  {
                    name: teaching_module_folder_id,
                    in: query,
                    schema: { type: string },
                  },
                  { name: rubric_id, in: query, schema: { type: string } },
                  {
                    name: class_subject_id,
                    in: query,
                    schema: { type: string },
                  },
                  { name: subject_id, in: query, schema: { type: string } },
                  {
                    name: teacher_user_id,
                    in: query,
                    schema: { type: string },
                  },
                  {
                    name: scoring_method,
                    in: query,
                    schema:
                      { enum: [MANUAL, RUBRIC], type: string, format: enum },
                  },
                  {
                    name: assignment_type,
                    in: query,
                    schema:
                      {
                        enum: [ASSESSMENT_EMPTY, FORMATIVE, SUMMATIVE, EXAM],
                        type: string,
                        format: enum,
                      },
                  },
                  {
                    name: teaching_module_id,
                    in: query,
                    schema: { type: string },
                  },
                  { name: exam_id, in: query, schema: { type: string } },
                  { name: sort, in: query, schema: { type: string } },
                  {
                    name: limit,
                    in: query,
                    schema: { type: integer, format: uint32 },
                  },
                  {
                    name: offset,
                    in: query,
                    schema: { type: integer, format: uint32 },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicListAssignmentResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
          post:
            {
              tags: [AssignmentService],
              summary: Create an assignment,
              description: Create an assignment,
              operationId: AssignmentService_CreateAssignment,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicCreateAssignmentRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicCreateAssignmentResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
          patch:
            {
              tags: [AssignmentService],
              summary: Update an assignment,
              description: Update an assignment,
              operationId: AssignmentService_UpdateAssignment,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicUpdateAssignmentRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicUpdateAssignmentResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/assignment/detail/{assignment_id}":
        {
          get:
            {
              tags: [AssignmentService],
              summary: Get an assignment,
              description: Get assignment by id,
              operationId: AssignmentService_GetAssignmentById,
              parameters:
                [
                  {
                    name: assignment_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetAssignmentByIdResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/assignment/presigned-url:
        {
          post:
            {
              tags: [AssignmentService],
              summary: Create assignment presigned URLs,
              description: Create an AWS S3 presigned URLs to upload assignment assets,
              operationId: AssignmentService_CreateAssignmentPresignedPostUrl,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicCreateAssignmentPresignedPostUrlRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicCreateAssignmentPresignedPostUrlResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/assignment/statistic/detail/{assignment_id}":
        {
          get:
            {
              tags: [AssignmentService],
              summary: Get an assignment statistic,
              description: Get assignment statistic by assignment id,
              operationId: AssignmentService_GetAssignmentStatisticById,
              parameters:
                [
                  {
                    name: assignment_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetAssignmentStatisticByIdResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/assignment/submission:
        {
          get:
            {
              tags: [AssignmentService],
              summary: List assignment submissions,
              description: List assignment submissions,
              operationId: AssignmentService_ListAssignmentSubmission,
              parameters:
                [
                  { name: assignment_id, in: query, schema: { type: string } },
                  {
                    name: student_user_id,
                    in: query,
                    schema: { type: string },
                  },
                  {
                    name: class_subject_id,
                    in: query,
                    schema: { type: string },
                  },
                  {
                    name: submission_state,
                    in: query,
                    schema:
                      {
                        enum:
                          [
                            UNKNOWN_SUBMISSON,
                            NO_SUBMISSION,
                            NEED_GRADING,
                            GRADED,
                          ],
                        type: string,
                        format: enum,
                      },
                  },
                  {
                    name: teaching_module_folder_id,
                    in: query,
                    schema: { type: string },
                  },
                  { name: sort, in: query, schema: { type: string } },
                  {
                    name: limit,
                    in: query,
                    schema: { type: integer, format: uint32 },
                  },
                  {
                    name: offset,
                    in: query,
                    schema: { type: integer, format: uint32 },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicListAssignmentSubmissionResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
          post:
            {
              tags: [AssignmentService],
              summary: Create assignment submission,
              description: Creates a student assignment submission.,
              operationId: AssignmentService_CreateAssignmentSubmission,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicCreateAssignmentSubmissionRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicCreateAssignmentSubmissionResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
          patch:
            {
              tags: [AssignmentService],
              summary: Update assignment submission,
              description: Updates a student assignment submission.,
              operationId: AssignmentService_UpdateAssignmentSubmission,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicUpdateAssignmentSubmissionRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicUpdateAssignmentSubmissionResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/assignment/submission/assess:
        {
          post:
            {
              tags: [AssignmentService],
              summary: Assess assignment submission,
              description: Assesss a student assignment submission.,
              operationId: AssignmentService_AssessAssignmentSubmission,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicAssessAssignmentSubmissionRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicAssessAssignmentSubmissionResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/assignment/submission/detail/{submission_id}":
        {
          get:
            {
              tags: [AssignmentService],
              summary: Get a submission of assignment assessment by id,
              description: Get assignment submission by submission id,
              operationId: AssignmentService_GetAssignmentSubmissionById,
              parameters:
                [
                  {
                    name: submission_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetAssignmentSubmissionByIdResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/assignment/submission/finalize:
        {
          post:
            {
              tags: [AssignmentService],
              summary: Finalize assignment submission,
              description: Finalizes an assignment submission of a student.,
              operationId: AssignmentService_FinalizeAssignmentSubmission,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicFinalizeAssignmentSubmissionRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicFinalizeAssignmentSubmissionResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/assignment/submission/student-id:
        {
          get:
            {
              tags: [AssignmentService],
              summary: Get an assignment submission by student id,
              description: Get assignment assessment by specified student id and assignment id,
              operationId: AssignmentService_GetAssignmentSubmissionByStudentUserId,
              parameters:
                [
                  { name: assignment_id, in: query, schema: { type: string } },
                  {
                    name: student_user_id,
                    in: query,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetAssignmentSubmissionByStudentUserIdResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/assignment/submission/student-id/bulk:
        {
          get:
            {
              tags: [AssignmentService],
              summary: Get bulk assignment submission by many student ids,
              description: Get bulk assignment assessment by specified student ids and assignment id,
              operationId: AssignmentService_GetBulkAssignmentSubmissionByStudentUserId,
              parameters:
                [
                  { name: assignment_id, in: query, schema: { type: string } },
                  {
                    name: student_user_ids,
                    in: query,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetBulkAssignmentSubmissionByStudentUserIdResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/assignment/submission/{submission_id}":
        {
          delete:
            {
              tags: [AssignmentService],
              summary: Delete a submission,
              description: Delete a submission,
              operationId: AssignmentService_DeleteAssignmentSubmission,
              parameters:
                [
                  {
                    name: submission_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicDeleteAssignmentSubmissionResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/assignment/to-review:
        {
          get:
            {
              tags: [AssignmentService],
              summary: List assignment to review,
              description: This API is used for teachers to see their to-do list for review.,
              operationId: AssignmentService_ListAssignmentToReview,
              parameters:
                [
                  {
                    name: teacher_user_id,
                    in: query,
                    schema: { type: string },
                  },
                  {
                    name: class_subject_id,
                    in: query,
                    schema: { type: string },
                  },
                  { name: sort, in: query, schema: { type: string } },
                  {
                    name: limit,
                    in: query,
                    schema: { type: integer, format: uint32 },
                  },
                  {
                    name: offset,
                    in: query,
                    schema: { type: integer, format: uint32 },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicListAssignmentToReviewResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/assignment/{assignment_id}":
        {
          delete:
            {
              tags: [AssignmentService],
              summary: Delete an assignment,
              description: Delete an assignment,
              operationId: AssignmentService_DeleteAssignment,
              parameters:
                [
                  {
                    name: assignment_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicDeleteAssignmentResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/quiz:
        {
          post:
            {
              tags: [QuizService],
              summary: Create a new Quiz,
              description: Teacher create a new Quiz,
              operationId: QuizService_CreateQuiz,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicCreateQuizRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicCreateQuizResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/quiz/answer/{quiz_id}/submit":
        {
          post:
            {
              tags: [QuizService],
              summary: Get Quiz Questions,
              description: Will return list of question for student to answer,
              operationId: QuizService_SubmitStudentAnswer,
              parameters:
                [
                  {
                    name: quiz_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicSubmitStudentAnswerRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicSubmitStudentAnswerResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/quiz/list/{instance_id}":
        {
          get:
            {
              tags: [QuizService],
              summary: Get Quiz List,
              description: Get Quiz list will return list of quiz info,
              operationId: QuizService_GetQuizList,
              parameters:
                [
                  {
                    name: instance_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                  { name: title, in: query, schema: { type: string } },
                  {
                    name: learning_goal_id,
                    in: query,
                    schema: { type: string },
                  },
                  {
                    name: learning_goal_title,
                    in: query,
                    schema: { type: string },
                  },
                  {
                    name: class_subject_id,
                    in: query,
                    schema: { type: string },
                  },
                  { name: subject_id, in: query, schema: { type: string } },
                  { name: subject_name, in: query, schema: { type: string } },
                  { name: exam_id, in: query, schema: { type: string } },
                  {
                    name: teaching_module_id,
                    in: query,
                    schema: { type: string },
                  },
                  {
                    name: teaching_module_folder_id,
                    in: query,
                    schema: { type: string },
                  },
                  { name: teacher_id, in: query, schema: { type: string } },
                  { name: sort, in: query, schema: { type: string } },
                  {
                    name: limit,
                    in: query,
                    schema: { type: integer, format: uint32 },
                  },
                  {
                    name: offset,
                    in: query,
                    schema: { type: integer, format: uint32 },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetQuizListResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/quiz/questions:
        {
          post:
            {
              tags: [QuizService],
              summary: Creating questions,
              description: Teacher create a list of questions,
              operationId: QuizService_CreateQuestions,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicCreateQuestionRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicCreateQuestionResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/quiz/questions/{quiz_id}":
        {
          get:
            {
              tags: [QuizService],
              summary: Get Quiz Questions,
              description: Will return list of question for student to answer,
              operationId: QuizService_GetQuestionList,
              parameters:
                [
                  {
                    name: quiz_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetQuestionListResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
          patch:
            {
              tags: [QuizService],
              summary: Update Quiz Questions,
              description: Teacher can update question and server will replace every question in db,
              operationId: QuizService_EditQuestions,
              parameters:
                [
                  {
                    name: quiz_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicEditQuestionsRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicEditQuestionsResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/quiz/setting:
        {
          post:
            {
              tags: [QuizService],
              summary: Create a new Quiz,
              description: Teacher create a new Quiz,
              operationId: QuizService_CreateQuizSetting,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicCreateQuizSettingRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicCreateQuizSettingResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/quiz/setting/{id}":
        {
          patch:
            {
              tags: [QuizService],
              summary: Update Quiz Setting,
              description: Update Quiz Setting,
              operationId: QuizService_UpdateQuizSetting,
              parameters:
                [
                  {
                    name: id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicUpdateQuizSettingRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicUpdateQuizSettingResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/quiz/statistics/{quiz_id}":
        {
          get:
            {
              tags: [QuizService],
              summary: Get Quiz Statistics,
              description: Will return quiz statistics,
              operationId: QuizService_GetQuizStatistics,
              parameters:
                [
                  {
                    name: quiz_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetQuizStatisticsResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/quiz/student/submission:
        {
          get:
            {
              tags: [QuizService],
              summary: Get all student submission,
              description: Will return student quiz submission in class,
              operationId: QuizService_GetStudentSubmissions,
              parameters:
                [
                  { name: student_id, in: query, schema: { type: string } },
                  {
                    name: class_subject_id,
                    in: query,
                    schema: { type: string },
                  },
                  {
                    name: state,
                    in: query,
                    schema:
                      {
                        enum:
                          [
                            UNKNOWN_SUBMISSON,
                            NO_SUBMISSION,
                            NEED_GRADING,
                            GRADED,
                          ],
                        type: string,
                        format: enum,
                      },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetStudentSubmissionsResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/quiz/submission/list/{class_subject_id}/{quiz_id}":
        {
          get:
            {
              tags: [QuizService],
              summary: Get all quiz submission,
              description: Will return all quiz submission in class,
              operationId: QuizService_GetQuizSubmissionList,
              parameters:
                [
                  {
                    name: class_subject_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                  {
                    name: quiz_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                  {
                    name: state,
                    in: query,
                    schema:
                      {
                        enum:
                          [
                            UNKNOWN_SUBMISSON,
                            NO_SUBMISSION,
                            NEED_GRADING,
                            GRADED,
                          ],
                        type: string,
                        format: enum,
                      },
                  },
                  { name: student_name, in: query, schema: { type: string } },
                  {
                    name: limit,
                    in: query,
                    schema: { type: integer, format: uint32 },
                  },
                  {
                    name: offset,
                    in: query,
                    schema: { type: integer, format: uint32 },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetQuizSubmissionListResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/quiz/submission/manual-grading:
        {
          post:
            {
              tags: [QuizService],
              summary: Manual Grading Answer,
              description: Teacher will manually grading student answer,
              operationId: QuizService_ManualGradingSubmission,
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicManualGradingSubmissionRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicManualGradingSubmissionResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/quiz/submission/student-id:
        {
          get:
            {
              tags: [QuizService],
              summary: Get an quiz submission by student id,
              description: Will return quiz assessment by specified student id and quiz id,
              operationId: QuizService_GetQuizSubmissionByStudentId,
              parameters:
                [
                  { name: quiz_id, in: query, schema: { type: string } },
                  { name: student_id, in: query, schema: { type: string } },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetQuizSubmissionByStudentIdResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      /v1/quiz/submission/student-id/bulk:
        {
          get:
            {
              tags: [QuizService],
              summary: Get bulk quiz submission by many student ids,
              description: Will return multiple quiz assessment by specified student ids and quiz id,
              operationId: QuizService_GetBulkQuizSubmissionByStudentId,
              parameters:
                [
                  { name: quiz_id, in: query, schema: { type: string } },
                  { name: student_ids, in: query, schema: { type: string } },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetBulkQuizSubmissionByStudentIdResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/quiz/submission/{quiz_id}/{nisn}":
        {
          get:
            {
              tags: [QuizService],
              summary: Get Student Answer,
              description: Will return all student answer for selected quiz,
              operationId: QuizService_GetStudentAnswer,
              parameters:
                [
                  {
                    name: quiz_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                  {
                    name: nisn,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetStudentAnswerResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/quiz/submission_detail/{quiz_id}/{nisn}":
        {
          get:
            {
              tags: [QuizService],
              summary: Get Student Submission Details,
              description: Will return all detail about student submission and the quiz,
              operationId: QuizService_GetStudentSubmissionDetails,
              parameters:
                [
                  {
                    name: quiz_id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                  {
                    name: nisn,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetStudentSubmissionDetailsResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
      "/v1/quiz/{id}":
        {
          get:
            {
              tags: [QuizService],
              summary: Get Quiz Detail,
              description: Get Quiz Detail will return both quiz information and settings,
              operationId: QuizService_GetQuizDetail,
              parameters:
                [
                  {
                    name: id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicGetQuizDetailResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
          patch:
            {
              tags: [QuizService],
              summary: Update Quiz,
              description: Update Quiz Information,
              operationId: QuizService_UpdateQuiz,
              parameters:
                [
                  {
                    name: id,
                    in: path,
                    required: true,
                    schema: { type: string },
                  },
                ],
              requestBody:
                {
                  content:
                    {
                      application/json:
                        {
                          schema:
                            {
                              $ref: "#/components/schemas/publicUpdateQuizRequest",
                            },
                        },
                    },
                  required: true,
                },
              responses:
                {
                  "200":
                    {
                      description: OK,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/publicUpdateQuizResponse",
                                },
                            },
                        },
                    },
                  "500":
                    {
                      description: Internal Server Error,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                  "401":
                    {
                      description: Unauthorized JWT token.,
                      content:
                        {
                          application/json:
                            {
                              schema:
                                {
                                  $ref: "#/components/schemas/v1ErrorResponse",
                                },
                            },
                        },
                    },
                },
            },
        },
    },
  "components":
    {
      "schemas":
        {
          sharedListObservation:
            {
              type: object,
              properties:
                {
                  id:
                    { example: 123, type: string, description: Observation ID },
                  title:
                    {
                      example: Praktek seni musik menggunakan gitar,
                      type: string,
                      description: Observation title,
                    },
                  description:
                    { type: string, description: Observation description },
                  index_minimum:
                    {
                      example: 75.0,
                      type: number,
                      description: Observation index minimum on scale of 0 to 100,
                      format: float,
                    },
                  learning_goals:
                    {
                      example: [123, 234, 567],
                      type: array,
                      items: { type: string },
                      description: Learning goal IDs related to observation,
                    },
                  publish:
                    { type: boolean, description: Observation publish status },
                  teaching_module_folder_id:
                    {
                      example: 123,
                      type: string,
                      description: Teaching Module Folder ID,
                    },
                  instance_id:
                    { example: 123, type: string, description: Instance ID },
                  rubric_id:
                    { example: 123, type: string, description: Rubric ID },
                  class_subject_id:
                    {
                      example: 123,
                      type: string,
                      description: "Class Subject ID, observation will be attached to specific class",
                    },
                  subject:
                    {
                      $ref: "#/components/schemas/sharedSubjectDetails",
                    },
                  teacher_user_id:
                    {
                      example: 123,
                      type: string,
                      description: "Teacher User ID, the user ID of a teacher of the Class Subject and the maker of the observation",
                    },
                  scoring_method:
                    {
                      example: RUBRIC,
                      enum: [MANUAL, RUBRIC],
                      type: string,
                      description: Observation scoring method,
                      format: enum,
                    },
                  observation_type:
                    {
                      example: SUMMATIVE,
                      enum: [ASSESSMENT_EMPTY, FORMATIVE, SUMMATIVE, EXAM],
                      type: string,
                      description: Observation assessment type,
                      format: enum,
                    },
                  teaching_module:
                    {
                      $ref: "#/components/schemas/sharedTeachingModuleSummary",
                    },
                  assignee:
                    {
                      type: array,
                      items: { type: string },
                      description: List of observed student user IDs,
                    },
                  exam_id: { example: 123, type: string, description: Exam ID },
                  class_name:
                    { example: 123, type: string, description: Class name },
                  created_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when observation is created,
                      format: date-time,
                    },
                  updated_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when observation data updated,
                      format: date-time,
                    },
                },
            },
          sharedListObservationStatistic:
            {
              type: object,
              properties:
                {
                  observation:
                    {
                      $ref: "#/components/schemas/sharedObservationDetails",
                    },
                  need_grading:
                    {
                      example: 123,
                      type: integer,
                      description: The number of students who needs to be graded,
                      format: uint32,
                    },
                  graded:
                    {
                      example: 123,
                      type: integer,
                      description: The number of student who have been graded,
                      format: uint32,
                    },
                  teacher_user_id:
                    {
                      example: 123,
                      type: string,
                      description: Teacher User ID,
                    },
                  class_subject_id:
                    {
                      example: 123,
                      type: string,
                      description: Class Subject ID,
                    },
                  created_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when observation statistic is created,
                      format: date-time,
                    },
                  updated_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when observation statistic is updated,
                      format: date-time,
                    },
                },
            },
          sharedListObservationSubmission:
            {
              type: object,
              properties:
                {
                  id:
                    {
                      example: 123,
                      type: string,
                      description: Observation submission ID,
                    },
                  observation:
                    {
                      $ref: "#/components/schemas/sharedObservationDetails",
                    },
                  student_user_id:
                    {
                      example: 123,
                      type: string,
                      description: Student User ID,
                    },
                  point:
                    {
                      example: 100.0,
                      type: number,
                      description: The points earned by students,
                      format: float,
                    },
                  RubricSubmission:
                    {
                      $ref: "#/components/schemas/sharedRubricSubmission",
                    },
                  submission_state:
                    {
                      example: NEED_GRADING,
                      enum:
                        [
                          UNKNOWN_SUBMISSON,
                          NO_SUBMISSION,
                          NEED_GRADING,
                          GRADED,
                        ],
                      type: string,
                      description: Observation submission state,
                      format: enum,
                    },
                  class_subject_id:
                    {
                      example: 123,
                      type: string,
                      description: "Class Subject ID, observation submission will be attached to specific class",
                    },
                  teaching_module_folder_id:
                    {
                      example: 123,
                      type: string,
                      description: Teaching Module Folder ID,
                    },
                  created_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when observation submission is created,
                      format: date-time,
                    },
                  updated_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when observation submission is updated,
                      format: date-time,
                    },
                },
            },
          sharedObservation:
            {
              type: object,
              properties:
                {
                  id:
                    { example: 123, type: string, description: Observation ID },
                  title:
                    {
                      example: Praktek seni musik menggunakan gitar,
                      type: string,
                      description: Observation title,
                    },
                  description:
                    { type: string, description: Observation description },
                  index_minimum:
                    {
                      example: 75.0,
                      type: number,
                      description: Observation index minimum on scale of 0 to 100,
                      format: float,
                    },
                  learning_goals:
                    {
                      example: [123, 234, 567],
                      type: array,
                      items: { type: string },
                      description: Learning goal IDs related to observation,
                    },
                  publish:
                    { type: boolean, description: Observation publish status },
                  teaching_module_folder_id:
                    {
                      example: 123,
                      type: string,
                      description: Teaching Module Folder ID,
                    },
                  instance_id:
                    { example: 123, type: string, description: Instance ID },
                  rubric_id:
                    { example: 123, type: string, description: Rubric ID },
                  class_subject_id:
                    {
                      example: 123,
                      type: string,
                      description: "Class Subject ID, observation will be attached to specific class",
                    },
                  subject_id:
                    {
                      example: 123,
                      type: string,
                      description: "Subject ID, observation will be attached to all class that enrolled this subject",
                    },
                  teacher_user_id:
                    {
                      example: 123,
                      type: string,
                      description: "Teacher User ID, the user ID of a teacher of the Class Subject and the maker of the observation",
                    },
                  scoring_method:
                    {
                      example: RUBRIC,
                      enum: [MANUAL, RUBRIC],
                      type: string,
                      description: Observation scoring method,
                      format: enum,
                    },
                  observation_type:
                    {
                      example: SUMMATIVE,
                      enum: [ASSESSMENT_EMPTY, FORMATIVE, SUMMATIVE, EXAM],
                      type: string,
                      description: Observation assessment type,
                      format: enum,
                    },
                  teaching_module_id:
                    {
                      example: 123,
                      type: string,
                      description: Teaching Module ID,
                    },
                  assignee:
                    {
                      type: array,
                      items: { type: string },
                      description: List of observed student user IDs,
                    },
                  exam_id: { example: 123, type: string, description: Exam ID },
                  class_name:
                    { example: 123, type: string, description: Class name },
                  created_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when observation is created,
                      format: date-time,
                    },
                  updated_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when observation data updated,
                      format: date-time,
                    },
                },
            },
          sharedObservationDetails:
            {
              type: object,
              properties:
                {
                  id:
                    { example: 123, type: string, description: Observation ID },
                  title:
                    {
                      example: Praktek seni musik menggunakan gitar,
                      type: string,
                      description: Observation title,
                    },
                  description:
                    { type: string, description: Observation description },
                  index_minimum:
                    {
                      example: 75.0,
                      type: number,
                      description: Observation index minimum on scale of 0 to 100,
                      format: float,
                    },
                  learning_goals:
                    {
                      example: [123, 234, 567],
                      type: array,
                      items: { type: string },
                      description: Learning goal IDs related to observation,
                    },
                  publish:
                    { type: boolean, description: Observation publish status },
                  teaching_module_folder_id:
                    {
                      example: 123,
                      type: string,
                      description: Teaching Module Folder ID,
                    },
                  instance_id:
                    { example: 123, type: string, description: Instance ID },
                  rubric_id:
                    { example: 123, type: string, description: Rubric ID },
                  class_subject_id:
                    {
                      example: 123,
                      type: string,
                      description: "Class Subject ID, observation will be attached to specific class",
                    },
                  subject:
                    {
                      $ref: "#/components/schemas/sharedSubjectDetails",
                    },
                  teacher_user_id:
                    {
                      example: 123,
                      type: string,
                      description: "Teacher User ID, the user ID of a teacher of the Class Subject and the maker of the observation",
                    },
                  scoring_method:
                    {
                      example: RUBRIC,
                      enum: [MANUAL, RUBRIC],
                      type: string,
                      description: Observation scoring method,
                      format: enum,
                    },
                  observation_type:
                    {
                      example: SUMMATIVE,
                      enum: [ASSESSMENT_EMPTY, FORMATIVE, SUMMATIVE, EXAM],
                      type: string,
                      description: Observation assessment type,
                      format: enum,
                    },
                  teaching_module:
                    {
                      $ref: "#/components/schemas/sharedTeachingModuleSummary",
                    },
                  assignee:
                    {
                      type: array,
                      items: { type: string },
                      description: List of observed student user IDs,
                    },
                  exam_id: { example: 123, type: string, description: Exam ID },
                  class_name:
                    { example: 123, type: string, description: Class name },
                  created_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when observation is created,
                      format: date-time,
                    },
                  updated_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when observation data updated,
                      format: date-time,
                    },
                },
            },
          sharedObservationStatistic:
            {
              type: object,
              properties:
                {
                  observation_id:
                    { example: 123, type: string, description: Observation ID },
                  need_grading:
                    {
                      example: 123,
                      type: integer,
                      description: The number of students who needs to be graded,
                      format: uint32,
                    },
                  graded:
                    {
                      example: 123,
                      type: integer,
                      description: The number of student who have been graded,
                      format: uint32,
                    },
                  teacher_user_id:
                    {
                      example: 123,
                      type: string,
                      description: Teacher User ID,
                    },
                  class_subject_id:
                    {
                      example: 123,
                      type: string,
                      description: Class Subject ID,
                    },
                  created_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when observation statistic is created,
                      format: date-time,
                    },
                  updated_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when observation statistic is updated,
                      format: date-time,
                    },
                },
            },
          sharedObservationSubmission:
            {
              type: object,
              properties:
                {
                  id:
                    {
                      example: 123,
                      type: string,
                      description: Observation submission ID,
                    },
                  observation_id:
                    { example: 123, type: string, description: Observation ID },
                  student_user_id:
                    {
                      example: 123,
                      type: string,
                      description: Student User ID,
                    },
                  point:
                    {
                      example: 100.0,
                      type: number,
                      description: The points earned by students,
                      format: float,
                    },
                  RubricSubmission:
                    {
                      $ref: "#/components/schemas/sharedRubricSubmission",
                    },
                  submission_state:
                    {
                      example: NEED_GRADING,
                      enum:
                        [
                          UNKNOWN_SUBMISSON,
                          NO_SUBMISSION,
                          NEED_GRADING,
                          GRADED,
                        ],
                      type: string,
                      description: Observation submission state,
                      format: enum,
                    },
                  class_subject_id:
                    {
                      example: 123,
                      type: string,
                      description: "Class Subject ID, observation submission will be attached to specific class",
                    },
                  teaching_module_folder_id:
                    {
                      example: 123,
                      type: string,
                      description: Teaching Module Folder ID,
                    },
                  created_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when observation submission is created,
                      format: date-time,
                    },
                  updated_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when observation submission is updated,
                      format: date-time,
                    },
                },
            },
          sharedRubricSubmission:
            {
              type: object,
              properties:
                {
                  rubric_id:
                    { example: 123, type: string, description: Rubric ID },
                  total_point:
                    {
                      example: 100.0,
                      type: number,
                      description: The total points from the rubric assessment,
                      format: float,
                    },
                  points:
                    {
                      type: array,
                      items: { type: number, format: float },
                      description: The list of criteria point,
                    },
                },
            },
          sharedSubjectDetails:
            {
              type: object,
              properties:
                {
                  id: { example: 123, type: string, description: Subject ID },
                  grade_level:
                    {
                      example: 1,
                      type: string,
                      description: Subject Grade Level,
                    },
                  major:
                    {
                      example: [IPA, IPS, BAHASA],
                      type: array,
                      items: { type: string },
                      description: Subject listed major,
                    },
                  name:
                    {
                      example: Matematika,
                      type: string,
                      description: Subject name,
                    },
                  subject_code:
                    { example: MTK, type: string, description: Subject code },
                  subject_type:
                    {
                      enum: [SUBJECT_GENERAL, SUBJECT_MAJOR, SUBJECT_SELECTIVE],
                      type: string,
                      description: Subject type,
                      format: enum,
                    },
                  description: { type: string, description: Description },
                },
            },
          sharedTeachingModuleSummary:
            {
              type: object,
              properties:
                {
                  id: { type: string, description: Teaching Module ID },
                  title:
                    { type: string, description: Title for teaching module },
                  learning_profile:
                    {
                      type: array,
                      items: { type: string },
                      description: Learning Profile associated with teaching module,
                    },
                  start_date:
                    {
                      type: string,
                      description: Start date of teaching module,
                      format: date-time,
                    },
                  end_date:
                    {
                      type: string,
                      description: End date of teaching module,
                      format: date-time,
                    },
                  subject_id:
                    {
                      type: string,
                      description: Subject ID associated with teaching module,
                    },
                  created_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when Curriculum is created,
                      format: date-time,
                    },
                  updated_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when Curriculum data updated,
                      format: date-time,
                    },
                  cover_image:
                    {
                      type: string,
                      description: Cover Image for teaching module,
                    },
                  time_allocation:
                    {
                      type: string,
                      description: Time allocated for teaching module,
                    },
                  curriculum_id: { type: string, description: curriculum ID },
                  description: { type: string, description: Description },
                  teacher_id: { type: string, description: teacher id },
                  index_minimum:
                    { type: integer, description: teacher id, format: int32 },
                },
            },
          publicCreateObservationRequest:
            {
              type: object,
              properties:
                {
                  title:
                    {
                      example: Praktek seni musik menggunakan gitar,
                      type: string,
                      description: Observation title,
                    },
                  description:
                    { type: string, description: Observation description },
                  index_minimum:
                    {
                      example: 75.0,
                      type: number,
                      description: Observation index minimum on scale of 0 to 100,
                      format: float,
                    },
                  learning_goals:
                    {
                      example: [123, 234, 567],
                      type: array,
                      items: { type: string },
                      description: Learning goal IDs related to observation,
                    },
                  publish:
                    { type: boolean, description: Observation publish status },
                  teaching_module_folder_id:
                    {
                      example: 123,
                      type: string,
                      description: Teaching Module Folder ID,
                    },
                  class_subject_id:
                    {
                      example: 123,
                      type: string,
                      description: "Class Subject ID, observation will be attached to specific class",
                    },
                  subject_id:
                    {
                      example: 123,
                      type: string,
                      description: "Subject ID, observation will be attached to all class that enrolled this subject",
                    },
                  teacher_user_id:
                    {
                      example: 123,
                      type: string,
                      description: "Teacher User ID, the user ID of a teacher of the Class Subject and the maker of the observation",
                    },
                  rubric_id:
                    { example: 123, type: string, description: Rubric ID },
                  scoring_method:
                    {
                      example: RUBRIC,
                      enum: [MANUAL, RUBRIC],
                      type: string,
                      description: Observation scoring method,
                      format: enum,
                    },
                  observation_type:
                    {
                      example: SUMMATIVE,
                      enum: [ASSESSMENT_EMPTY, FORMATIVE, SUMMATIVE, EXAM],
                      type: string,
                      description: Observation assessment type,
                      format: enum,
                    },
                  teaching_module_id:
                    {
                      example: 123,
                      type: string,
                      description: Teaching Module ID,
                    },
                  assignee:
                    {
                      type: array,
                      items: { type: string },
                      description: List of observed student user IDs,
                    },
                  exam_id: { example: 123, type: string, description: Exam ID },
                  class_name:
                    { example: 123, type: string, description: Class name },
                },
            },
          publicCreateObservationResponse:
            {
              type: object,
              properties:
                {
                  observation:
                    {
                      $ref: "#/components/schemas/sharedObservation",
                    },
                  message:
                    {
                      type: string,
                      description: response message of creating observation,
                    },
                },
            },
          publicCreateObservationSubmissionRequest:
            {
              type: object,
              properties:
                {
                  observation_id:
                    { example: 123, type: string, description: Observation ID },
                  student_user_id:
                    {
                      example: 123,
                      type: string,
                      description: Student User ID,
                    },
                  point:
                    {
                      example: 100.0,
                      type: number,
                      description: The points earned by students,
                      format: float,
                    },
                  RubricSubmission:
                    {
                      $ref: "#/components/schemas/sharedRubricSubmission",
                    },
                  submission_state:
                    {
                      example: RUBRIC,
                      enum:
                        [
                          UNKNOWN_SUBMISSON,
                          NO_SUBMISSION,
                          NEED_GRADING,
                          GRADED,
                        ],
                      type: string,
                      description: Observation submission state,
                      format: enum,
                    },
                  class_subject_id:
                    {
                      example: 123,
                      type: string,
                      description: "Class Subject ID, observation submission will be attached to specific class",
                    },
                },
            },
          publicCreateObservationSubmissionResponse:
            {
              type: object,
              properties:
                {
                  message:
                    {
                      type: string,
                      description: response message of creating observation assessment,
                    },
                  observation_submission:
                    {
                      $ref: "#/components/schemas/sharedObservationSubmission",
                    },
                },
            },
          publicDeleteObservationResponse:
            {
              type: object,
              properties:
                {
                  message:
                    {
                      type: string,
                      description: response message of deleting observation,
                    },
                },
            },
          publicDeleteObservationSubmissionResponse:
            {
              type: object,
              properties:
                {
                  message:
                    {
                      type: string,
                      description: response message of deleting observation assessment submission,
                    },
                },
            },
          publicGetBulkObservationSubmissionByStudentUserIdResponse:
            {
              type: object,
              properties:
                {
                  observation_submissions:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedObservationSubmission",
                        },
                      description: Observation submission details,
                    },
                },
            },
          publicGetObservationByIdResponse:
            {
              type: object,
              properties:
                {
                  observation:
                    {
                      $ref: "#/components/schemas/sharedObservation",
                    },
                },
            },
          publicGetObservationStatisticByIdResponse:
            {
              type: object,
              properties:
                {
                  statistic:
                    {
                      $ref: "#/components/schemas/sharedObservationStatistic",
                    },
                },
            },
          publicGetObservationSubmissionByIdResponse:
            {
              type: object,
              properties:
                {
                  observation_submission:
                    {
                      $ref: "#/components/schemas/sharedObservationSubmission",
                    },
                },
            },
          publicGetObservationSubmissionByStudentUserIdResponse:
            {
              type: object,
              properties:
                {
                  observation_submission:
                    {
                      $ref: "#/components/schemas/sharedObservationSubmission",
                    },
                },
            },
          publicListObservationResponse:
            {
              type: object,
              properties:
                {
                  observations:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedListObservation",
                        },
                      description: List Observations,
                    },
                },
            },
          publicListObservationSubmissionResponse:
            {
              type: object,
              properties:
                {
                  observation_submissions:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedListObservationSubmission",
                        },
                      description: List of the observation submission assessment,
                    },
                },
            },
          publicListObservationToReviewResponse:
            {
              type: object,
              properties:
                {
                  lists:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedListObservationStatistic",
                        },
                      description: List observation statistics,
                    },
                },
            },
          publicUpdateObservationRequest:
            {
              type: object,
              properties:
                {
                  id:
                    { example: 123, type: string, description: Observation ID },
                  title:
                    {
                      example: Praktek seni musik menggunakan gitar,
                      type: string,
                      description: Observation title,
                    },
                  description:
                    { type: string, description: Observation description },
                  index_minimum:
                    {
                      example: 75.0,
                      type: number,
                      description: Observation index minimum on scale of 0 to 100,
                      format: float,
                    },
                  learning_goals:
                    {
                      example: [123, 234, 567, 8910],
                      type: array,
                      items: { type: string },
                      description: Learning goal IDs related to observation,
                    },
                  publish:
                    { type: boolean, description: Observation publish status },
                  rubric_id:
                    { example: 123, type: string, description: Rubric ID },
                  scoring_method:
                    {
                      example: RUBRIC,
                      enum: [MANUAL, RUBRIC],
                      type: string,
                      description: Observation scoring method,
                      format: enum,
                    },
                  observation_type:
                    {
                      example: SUMMATIVE,
                      enum: [ASSESSMENT_EMPTY, FORMATIVE, SUMMATIVE, EXAM],
                      type: string,
                      description: Observation assessment type,
                      format: enum,
                    },
                },
            },
          publicUpdateObservationResponse:
            {
              type: object,
              properties:
                {
                  observation:
                    {
                      $ref: "#/components/schemas/sharedObservation",
                    },
                  message:
                    {
                      type: string,
                      description: response message of updating observation,
                    },
                },
            },
          publicUpdateObservationSubmissionRequest:
            {
              type: object,
              properties:
                {
                  id:
                    {
                      example: 123,
                      type: string,
                      description: Observation submission ID,
                    },
                  point:
                    {
                      example: 100.0,
                      type: number,
                      description: The points earned by students,
                      format: float,
                    },
                  RubricSubmission:
                    {
                      $ref: "#/components/schemas/sharedRubricSubmission",
                    },
                },
            },
          publicUpdateObservationSubmissionResponse:
            {
              type: object,
              properties:
                {
                  message:
                    {
                      type: string,
                      description: response message of updating observation assessment,
                    },
                  observation_submission:
                    {
                      $ref: "#/components/schemas/sharedObservationSubmission",
                    },
                },
            },
          "v1ErrorResponse":
            {
              "type": "object",
              "properties":
                {
                  "errors":
                    {
                      "title": "errors",
                      "type": "array",
                      "items":
                        { "$ref": "#/components/schemas/v1ErrorInfo" },
                    },
                },
            },
          "v1ErrorInfo":
            {
              "type": "object",
              "properties":
                {
                  "message": { "title": "message", "type": "string" },
                  "code": { "title": "code", "type": "string" },
                  "field": { "title": "field", "type": "string" },
                },
            },
          publicCreateRubricRequest:
            {
              type: object,
              properties:
                {
                  title:
                    {
                      example: Rubrik penilaian presentasi sejarah,
                      type: string,
                      description: Rubric title,
                    },
                  description:
                    { type: string, description: Rubric description },
                  total_point:
                    {
                      example: 100.0,
                      type: number,
                      description: Rubric total point,
                      format: float,
                    },
                  criteria:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedCriterion",
                        },
                      description: The list of rubric criteria,
                    },
                },
            },
          publicCreateRubricResponse:
            {
              type: object,
              properties:
                {
                  rubric:
                    {
                      $ref: "#/components/schemas/sharedRubric",
                    },
                  message:
                    {
                      type: string,
                      description: response message of creating rubric,
                    },
                },
            },
          publicDeleteRubricResponse:
            {
              type: object,
              properties:
                {
                  message:
                    {
                      type: string,
                      description: response message of deleting rubric,
                    },
                },
            },
          publicGetRubricByIdResponse:
            {
              type: object,
              properties:
                {
                  rubric:
                    {
                      $ref: "#/components/schemas/sharedRubric",
                    },
                },
            },
          publicListRubricResponse:
            {
              type: object,
              properties:
                {
                  rubrics:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedRubric",
                        },
                      description: List Rubrics,
                    },
                },
            },
          publicUpdateRubricRequest:
            {
              type: object,
              properties:
                {
                  id: { example: 123, type: string, description: Rubric ID },
                  title:
                    {
                      example: Rubrik penilaian presentasi sejarah,
                      type: string,
                      description: Rubric title,
                    },
                  description:
                    { type: string, description: Rubric description },
                  total_point:
                    {
                      example: 100.0,
                      type: number,
                      description: Rubric total point,
                      format: float,
                    },
                  criteria:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedCriterion",
                        },
                      description: The list of rubric criteria,
                    },
                },
            },
          publicUpdateRubricResponse:
            {
              type: object,
              properties:
                {
                  rubric:
                    {
                      $ref: "#/components/schemas/sharedRubric",
                    },
                  message:
                    {
                      type: string,
                      description: response message of updating rubric,
                    },
                },
            },
          sharedCriterion:
            {
              type: object,
              properties:
                {
                  title:
                    {
                      example: Ekspresi dan Interpretasi,
                      type: string,
                      description: Criterion title,
                    },
                  description:
                    { type: string, description: Criterion description },
                  levels:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedLevel",
                        },
                      description: The list of criteria levels,
                    },
                },
            },
          sharedLevel:
            {
              type: object,
              properties:
                {
                  title:
                    {
                      example: Sangat Baik,
                      type: string,
                      description: Level title,
                    },
                  description: { type: string, description: Level description },
                  point:
                    {
                      example: 5.0,
                      type: number,
                      description: Level point,
                      format: float,
                    },
                },
            },
          sharedRubric:
            {
              type: object,
              properties:
                {
                  id: { example: 123, type: string, description: Rubric ID },
                  title:
                    {
                      example: Rubrik penilaian presentasi sejarah,
                      type: string,
                      description: Rubric title,
                    },
                  description:
                    { type: string, description: Rubric description },
                  total_point:
                    {
                      example: 100.0,
                      type: number,
                      description: Rubric total point,
                      format: float,
                    },
                  criteria:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedCriterion",
                        },
                      description: The list of rubric criteria,
                    },
                  teacher_user_id:
                    {
                      example: 123,
                      type: string,
                      description: Teacher User ID,
                    },
                  created_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when Rubric is created,
                      format: date-time,
                    },
                  updated_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when Rubric data updated,
                      format: date-time,
                    },
                },
            },
          v1AttachmentFile:
            {
              type: object,
              properties:
                {
                  display_name: { type: string },
                  unique_name: { type: string },
                  file_extension: { type: string },
                  file_size: { type: string },
                  link: { type: string },
                },
            },
          v1S3PresignedUrlRequest:
            {
              type: object,
              properties:
                { filename: { type: string }, filesize: { type: string } },
            },
          v1S3PresignedUrlResponse:
            {
              type: object,
              properties:
                {
                  url: { type: string },
                  values:
                    {
                      $ref: "#/components/schemas/v1S3PresignedValues",
                    },
                },
            },
          v1S3PresignedValues:
            {
              type: object,
              properties:
                {
                  X_Amz_Algorithm: { type: string },
                  X_Amz_Credential: { type: string },
                  X_Amz_Date: { type: string },
                  X_Amz_Signature: { type: string },
                  key: { type: string },
                  policy: { type: string },
                },
            },
          publicAssessAssignmentSubmissionRequest:
            {
              type: object,
              properties:
                {
                  id:
                    {
                      example: 123,
                      type: string,
                      description: Assignment submission ID,
                    },
                  point:
                    {
                      example: 100.0,
                      type: number,
                      description: The points earned by students,
                      format: float,
                    },
                  RubricSubmission:
                    {
                      $ref: "#/components/schemas/sharedRubricSubmission",
                    },
                },
            },
          publicAssessAssignmentSubmissionResponse:
            {
              type: object,
              properties:
                {
                  message:
                    {
                      type: string,
                      description: response message of adding assignment assessment,
                    },
                },
            },
          publicCreateAssignmentPresignedPostUrlRequest:
            {
              type: object,
              properties:
                {
                  files:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/v1S3PresignedUrlRequest",
                        },
                      description: File data consists of the filename along with its extension and the file size in bytes.,
                    },
                },
            },
          publicCreateAssignmentPresignedPostUrlResponse:
            {
              type: object,
              properties:
                {
                  presignedUrls:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/v1S3PresignedUrlResponse",
                        },
                      description: Presigned Urls,
                    },
                },
            },
          publicCreateAssignmentRequest:
            {
              type: object,
              properties:
                {
                  title:
                    {
                      example: Tes Baris dan Deret Aritmatika,
                      type: string,
                      description: Assignment title,
                    },
                  description:
                    { type: string, description: Assignment description },
                  available_date:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Start date when the assignment can be done,
                      format: date-time,
                    },
                  due_date:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Assignment deadline,
                      format: date-time,
                    },
                  instruction:
                    { type: string, description: Assignment instruction },
                  index_minimum:
                    {
                      example: 75.0,
                      type: number,
                      description: Assignment index minimum on scale of 0 to 100,
                      format: float,
                    },
                  learning_goals:
                    {
                      example: [123, 234, 567],
                      type: array,
                      items: { type: string },
                      description: Learning goal IDs related to assignment,
                    },
                  publish:
                    { type: boolean, description: Assignment publish status },
                  teaching_module_folder_id:
                    {
                      example: 123,
                      type: string,
                      description: Teaching Module Folder ID,
                    },
                  class_subject_id:
                    {
                      example: 123,
                      type: string,
                      description: "Class Subject ID, assignment will be attached to specific class",
                    },
                  subject_id:
                    {
                      example: 123,
                      type: string,
                      description: "Subject ID, assignment will be attached to all class that enrolled this subject",
                    },
                  teacher_user_id:
                    {
                      example: 123,
                      type: string,
                      description: "Teacher User ID, the user ID of ateacher of the Class Subject and the maker of the assignment",
                    },
                  rubric_id:
                    { example: 123, type: string, description: Rubric ID },
                  scoring_method:
                    {
                      example: RUBRIC,
                      enum: [MANUAL, RUBRIC],
                      type: string,
                      description: Assignment scoring method,
                      format: enum,
                    },
                  assignment_type:
                    {
                      example: SUMMATIVE,
                      enum: [ASSESSMENT_EMPTY, FORMATIVE, SUMMATIVE, EXAM],
                      type: string,
                      description: Assignment assessment type,
                      format: enum,
                    },
                  assignee:
                    {
                      type: array,
                      items: { type: string },
                      description: List of student user ids who are given assignments,
                    },
                  instance_id:
                    { example: 123, type: string, description: Instance ID },
                  attachment_files:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/v1AttachmentFile",
                        },
                      description: Attachment files,
                    },
                  teaching_module_id:
                    {
                      example: 123,
                      type: string,
                      description: Teaching Module ID,
                    },
                  exam_id: { example: 123, type: string, description: Exam ID },
                  class_name:
                    { example: 123, type: string, description: Class name },
                },
            },
          publicCreateAssignmentResponse:
            {
              type: object,
              properties:
                {
                  assignment:
                    {
                      $ref: "#/components/schemas/sharedAssignment",
                    },
                  message:
                    {
                      type: string,
                      description: response message of creating assignment,
                    },
                },
            },
          publicCreateAssignmentSubmissionRequest:
            {
              type: object,
              properties:
                {
                  assignment_id:
                    { example: 123, type: string, description: Assignment ID },
                  student_user_id:
                    {
                      example: 123,
                      type: string,
                      description: Student User ID,
                    },
                  answer_text:
                    { example: 123, type: string, description: Student ID },
                  attachment_files:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/v1AttachmentFile",
                        },
                      description: Attachment files,
                    },
                  class_subject_id:
                    {
                      example: 123,
                      type: string,
                      description: "Class Subject ID, assignment submission will be attached to specific class",
                    },
                },
            },
          publicCreateAssignmentSubmissionResponse:
            {
              type: object,
              properties:
                {
                  message:
                    {
                      type: string,
                      description: response message of creating assignment submission,
                    },
                  assignment_submission:
                    {
                      $ref: "#/components/schemas/sharedAssignmentSubmission",
                    },
                },
            },
          publicDeleteAssignmentResponse:
            {
              type: object,
              properties:
                {
                  message:
                    {
                      type: string,
                      description: response message of deleting assignment,
                    },
                },
            },
          publicDeleteAssignmentSubmissionResponse:
            {
              type: object,
              properties:
                {
                  message:
                    {
                      type: string,
                      description: response message of deleting assignment submission,
                    },
                },
            },
          publicFinalizeAssignmentSubmissionRequest:
            {
              type: object,
              properties:
                {
                  id:
                    {
                      example: 123,
                      type: string,
                      description: Assignment submission ID,
                    },
                },
            },
          publicFinalizeAssignmentSubmissionResponse:
            {
              type: object,
              properties:
                {
                  message:
                    {
                      type: string,
                      description: response message of finalizing assignment submission,
                    },
                },
            },
          publicGetAssignmentByIdResponse:
            {
              type: object,
              properties:
                {
                  assignment:
                    {
                      $ref: "#/components/schemas/sharedAssignment",
                    },
                },
            },
          publicGetAssignmentStatisticByIdResponse:
            {
              type: object,
              properties:
                {
                  statistic:
                    {
                      $ref: "#/components/schemas/sharedAssignmentStatistic",
                    },
                },
            },
          publicGetAssignmentSubmissionByIdResponse:
            {
              type: object,
              properties:
                {
                  assignment_submission:
                    {
                      $ref: "#/components/schemas/sharedAssignmentSubmission",
                    },
                },
            },
          publicGetAssignmentSubmissionByStudentUserIdResponse:
            {
              type: object,
              properties:
                {
                  assignment_submission:
                    {
                      $ref: "#/components/schemas/sharedAssignmentSubmission",
                    },
                },
            },
          publicGetBulkAssignmentSubmissionByStudentUserIdResponse:
            {
              type: object,
              properties:
                {
                  assignment_submissions:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedAssignmentSubmission",
                        },
                      description: Assignment submission details,
                    },
                },
            },
          publicListAssignmentResponse:
            {
              type: object,
              properties:
                {
                  assignments:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedListAssignment",
                        },
                      description: List Assignments,
                    },
                },
            },
          publicListAssignmentSubmissionResponse:
            {
              type: object,
              properties:
                {
                  assignment_submissions:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedListAssignmentSubmission",
                        },
                      description: List assignment submissions,
                    },
                },
            },
          publicListAssignmentToReviewResponse:
            {
              type: object,
              properties:
                {
                  lists:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedListAssignmentStatistic",
                        },
                      description: List assignment statistics,
                    },
                },
            },
          publicUpdateAssignmentRequest:
            {
              type: object,
              properties:
                {
                  id:
                    { example: 123, type: string, description: Assignment ID },
                  title:
                    {
                      example: Tes Baris dan Deret Aritmatika,
                      type: string,
                      description: Assignment title,
                    },
                  description:
                    { type: string, description: Assignment description },
                  available_date:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Start date when the assignment can be done,
                      format: date-time,
                    },
                  due_date:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Assignment deadline,
                      format: date-time,
                    },
                  instruction:
                    { type: string, description: Assignment instruction },
                  index_minimum:
                    {
                      example: 75.0,
                      type: number,
                      description: Assignment index minimum on scale of 0 to 100,
                      format: float,
                    },
                  learning_goals:
                    {
                      example: [123, 234, 567, 8910],
                      type: array,
                      items: { type: string },
                      description: Learning goal IDs related to assignment,
                    },
                  publish:
                    { type: boolean, description: Assignment publish status },
                  rubric_id:
                    { example: 123, type: string, description: Rubric ID },
                  scoring_method:
                    {
                      example: RUBRIC,
                      enum: [MANUAL, RUBRIC],
                      type: string,
                      description: Assignment scoring method,
                      format: enum,
                    },
                  assignment_type:
                    {
                      example: SUMMATIVE,
                      enum: [ASSESSMENT_EMPTY, FORMATIVE, SUMMATIVE, EXAM],
                      type: string,
                      description: Assignment assessment type,
                      format: enum,
                    },
                  attachment_files:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/v1AttachmentFile",
                        },
                      description: Attachment files,
                    },
                },
            },
          publicUpdateAssignmentResponse:
            {
              type: object,
              properties:
                {
                  assignment:
                    {
                      $ref: "#/components/schemas/sharedAssignment",
                    },
                  message:
                    {
                      type: string,
                      description: response message of updating assignment,
                    },
                },
            },
          publicUpdateAssignmentSubmissionRequest:
            {
              type: object,
              properties:
                {
                  id:
                    {
                      example: 123,
                      type: string,
                      description: Assignment submission ID,
                    },
                  answer_text:
                    { example: 123, type: string, description: Student ID },
                  attachment_files:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/v1AttachmentFile",
                        },
                      description: Attachment files,
                    },
                },
            },
          publicUpdateAssignmentSubmissionResponse:
            {
              type: object,
              properties:
                {
                  message:
                    {
                      type: string,
                      description: response message of updating assignment submission,
                    },
                  assignment_submission:
                    {
                      $ref: "#/components/schemas/sharedAssignmentSubmission",
                    },
                },
            },
          sharedAssignment:
            {
              type: object,
              properties:
                {
                  id:
                    { example: 123, type: string, description: Assignment ID },
                  title:
                    {
                      example: Tes Baris dan Deret Aritmatika,
                      type: string,
                      description: Assignment title,
                    },
                  description:
                    { type: string, description: Assignment description },
                  available_date:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Start date when the assignment can be done,
                      format: date-time,
                    },
                  due_date:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Assignment deadline,
                      format: date-time,
                    },
                  instruction:
                    { type: string, description: Assignment instruction },
                  index_minimum:
                    {
                      example: 75.0,
                      type: number,
                      description: Assignment index minimum on scale of 0 to 100,
                      format: float,
                    },
                  learning_goals:
                    {
                      example: [123, 234, 567],
                      type: array,
                      items: { type: string },
                      description: Learning goal IDs related to assignment,
                    },
                  publish:
                    { type: boolean, description: Assignment publish status },
                  teaching_module_folder_id:
                    {
                      example: 123,
                      type: string,
                      description: Teaching Module Folder ID,
                    },
                  instance_id:
                    { example: 123, type: string, description: Instance ID },
                  rubric_id:
                    { example: 123, type: string, description: Rubric ID },
                  class_subject_id:
                    {
                      example: 123,
                      type: string,
                      description: "Class Subject ID, assignment will be attached to specific class",
                    },
                  subject_id:
                    {
                      example: 123,
                      type: string,
                      description: "Subject ID, assignment will be attached to all class that enrolled this subject",
                    },
                  teacher_user_id:
                    {
                      example: 123,
                      type: string,
                      description: "Teacher User ID, the user ID of a teacher of the Class Subject and the maker of the assignment",
                    },
                  scoring_method:
                    {
                      example: RUBRIC,
                      enum: [MANUAL, RUBRIC],
                      type: string,
                      description: Assignment scoring method,
                      format: enum,
                    },
                  assignment_type:
                    {
                      example: SUMMATIVE,
                      enum: [ASSESSMENT_EMPTY, FORMATIVE, SUMMATIVE, EXAM],
                      type: string,
                      description: Assignment assessment type,
                      format: enum,
                    },
                  assignee:
                    {
                      type: array,
                      items: { type: string },
                      description: List of student user ids who are given assignments,
                    },
                  attachment_files:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/v1AttachmentFile",
                        },
                      description: Attachment files,
                    },
                  teaching_module_id:
                    {
                      example: 123,
                      type: string,
                      description: Teaching Module ID,
                    },
                  exam_id: { example: 123, type: string, description: Exam ID },
                  class_name:
                    { example: 123, type: string, description: Class name },
                  created_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when assignment is created,
                      format: date-time,
                    },
                  updated_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when assignment data updated,
                      format: date-time,
                    },
                },
            },
          sharedAssignmentDetails:
            {
              type: object,
              properties:
                {
                  id:
                    { example: 123, type: string, description: Assignment ID },
                  title:
                    {
                      example: Tes Baris dan Deret Aritmatika,
                      type: string,
                      description: Assignment title,
                    },
                  description:
                    { type: string, description: Assignment description },
                  available_date:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Start date when the assignment can be done,
                      format: date-time,
                    },
                  due_date:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Assignment deadline,
                      format: date-time,
                    },
                  instruction:
                    { type: string, description: Assignment instruction },
                  index_minimum:
                    {
                      example: 75.0,
                      type: number,
                      description: Assignment index minimum on scale of 0 to 100,
                      format: float,
                    },
                  learning_goals:
                    {
                      example: [123, 234, 567],
                      type: array,
                      items: { type: string },
                      description: Learning goal IDs related to assignment,
                    },
                  publish:
                    { type: boolean, description: Assignment publish status },
                  teaching_module_folder_id:
                    {
                      example: 123,
                      type: string,
                      description: Teaching Module Folder ID,
                    },
                  instance_id:
                    { example: 123, type: string, description: Instance ID },
                  rubric_id:
                    { example: 123, type: string, description: Rubric ID },
                  class_subject_id:
                    {
                      example: 123,
                      type: string,
                      description: "Class Subject ID, assignment will be attached to specific class",
                    },
                  subject:
                    {
                      $ref: "#/components/schemas/sharedSubjectDetails",
                    },
                  teacher_user_id:
                    {
                      example: 123,
                      type: string,
                      description: "Teacher User ID, the user ID of a teacher of the Class Subject and the maker of the assignment",
                    },
                  scoring_method:
                    {
                      example: RUBRIC,
                      enum: [MANUAL, RUBRIC],
                      type: string,
                      description: Assignment scoring method,
                      format: enum,
                    },
                  assignment_type:
                    {
                      example: SUMMATIVE,
                      enum: [ASSESSMENT_EMPTY, FORMATIVE, SUMMATIVE, EXAM],
                      type: string,
                      description: Assignment assessment type,
                      format: enum,
                    },
                  assignee:
                    {
                      type: array,
                      items: { type: string },
                      description: List of student user ids who are given assignments,
                    },
                  attachment_files:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/v1AttachmentFile",
                        },
                      description: Attachment files,
                    },
                  teaching_module:
                    {
                      $ref: "#/components/schemas/sharedTeachingModuleSummary",
                    },
                  exam_id: { example: 123, type: string, description: Exam ID },
                  class_name:
                    { example: 123, type: string, description: Class name },
                  created_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when assignment is created,
                      format: date-time,
                    },
                  updated_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when assignment data updated,
                      format: date-time,
                    },
                },
            },
          sharedAssignmentStatistic:
            {
              type: object,
              properties:
                {
                  assignment_id:
                    { example: 123, type: string, description: Assignment ID },
                  no_submission:
                    {
                      example: 123,
                      type: integer,
                      description: The number of students who have been assigned but haven't submitted the assignment yet,
                      format: uint32,
                    },
                  need_grading:
                    {
                      example: 123,
                      type: integer,
                      description: The number of students who needs to be graded,
                      format: uint32,
                    },
                  graded:
                    {
                      example: 123,
                      type: integer,
                      description: The number of student who have been graded,
                      format: uint32,
                    },
                  submitted_on_time:
                    {
                      example: 123,
                      type: integer,
                      description: The number of students who submit their assignments on time,
                      format: uint32,
                    },
                  submitted_late:
                    {
                      example: 123,
                      type: integer,
                      description: The number of students who submit their assignments late,
                      format: uint32,
                    },
                  teacher_user_id:
                    {
                      example: 123,
                      type: string,
                      description: Teacher User ID,
                    },
                  class_subject_id:
                    {
                      example: 123,
                      type: string,
                      description: Class Subject ID,
                    },
                  created_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when assignment statistic is created,
                      format: date-time,
                    },
                  updated_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when assignment statistic is updated,
                      format: date-time,
                    },
                },
            },
          sharedAssignmentSubmission:
            {
              type: object,
              properties:
                {
                  id:
                    {
                      example: 123,
                      type: string,
                      description: Assignment submission ID,
                    },
                  assignment_id:
                    { example: 123, type: string, description: Assignment ID },
                  student_user_id:
                    {
                      example: 123,
                      type: string,
                      description: Student User ID,
                    },
                  answer_text:
                    { example: 123, type: string, description: Student ID },
                  attachment_files:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/v1AttachmentFile",
                        },
                      description: Attachment files,
                    },
                  point:
                    {
                      example: 100.0,
                      type: number,
                      description: The points earned by students on scale of 0 to 100,
                      format: float,
                    },
                  RubricSubmission:
                    {
                      $ref: "#/components/schemas/sharedRubricSubmission",
                    },
                  submission_state:
                    {
                      example: NEED_GRADING,
                      enum:
                        [
                          UNKNOWN_SUBMISSON,
                          NO_SUBMISSION,
                          NEED_GRADING,
                          GRADED,
                        ],
                      type: string,
                      description: Assignment submission state,
                      format: enum,
                    },
                  class_subject_id:
                    {
                      example: 123,
                      type: string,
                      description: "Class Subject ID, assignment submission will be attached to specific class",
                    },
                  teaching_module_folder_id:
                    {
                      example: 123,
                      type: string,
                      description: Teaching Module Folder ID,
                    },
                  created_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when assignment submission is created,
                      format: date-time,
                    },
                  updated_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when assignment submission is updated,
                      format: date-time,
                    },
                },
            },
          sharedListAssignment:
            {
              type: object,
              properties:
                {
                  id:
                    { example: 123, type: string, description: Assignment ID },
                  title:
                    {
                      example: Tes Baris dan Deret Aritmatika,
                      type: string,
                      description: Assignment title,
                    },
                  description:
                    { type: string, description: Assignment description },
                  available_date:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Start date when the assignment can be done,
                      format: date-time,
                    },
                  due_date:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Assignment deadline,
                      format: date-time,
                    },
                  instruction:
                    { type: string, description: Assignment instruction },
                  index_minimum:
                    {
                      example: 75.0,
                      type: number,
                      description: Assignment index minimum on scale of 0 to 100,
                      format: float,
                    },
                  learning_goals:
                    {
                      example: [123, 234, 567],
                      type: array,
                      items: { type: string },
                      description: Learning goal IDs related to assignment,
                    },
                  publish:
                    { type: boolean, description: Assignment publish status },
                  teaching_module_folder_id:
                    {
                      example: 123,
                      type: string,
                      description: Teaching Module Folder ID,
                    },
                  instance_id:
                    { example: 123, type: string, description: Instance ID },
                  rubric_id:
                    { example: 123, type: string, description: Rubric ID },
                  class_subject_id:
                    {
                      example: 123,
                      type: string,
                      description: "Class Subject ID, assignment will be attached to specific class",
                    },
                  subject:
                    {
                      $ref: "#/components/schemas/sharedSubjectDetails",
                    },
                  teacher_user_id:
                    {
                      example: 123,
                      type: string,
                      description: "Teacher User ID, the user ID of a teacher of the Class Subject and the maker of the assignment",
                    },
                  scoring_method:
                    {
                      example: RUBRIC,
                      enum: [MANUAL, RUBRIC],
                      type: string,
                      description: Assignment scoring method,
                      format: enum,
                    },
                  assignment_type:
                    {
                      example: SUMMATIVE,
                      enum: [ASSESSMENT_EMPTY, FORMATIVE, SUMMATIVE, EXAM],
                      type: string,
                      description: Assignment assessment type,
                      format: enum,
                    },
                  assignee:
                    {
                      type: array,
                      items: { type: string },
                      description: List of student user ids who are given assignments,
                    },
                  attachment_files:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/v1AttachmentFile",
                        },
                      description: Attachment files,
                    },
                  teaching_module:
                    {
                      $ref: "#/components/schemas/sharedTeachingModuleSummary",
                    },
                  exam_id: { example: 123, type: string, description: Exam ID },
                  class_name:
                    { example: 123, type: string, description: Class name },
                  created_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when assignment is created,
                      format: date-time,
                    },
                  updated_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when assignment data updated,
                      format: date-time,
                    },
                },
            },
          sharedListAssignmentStatistic:
            {
              type: object,
              properties:
                {
                  assignment:
                    {
                      $ref: "#/components/schemas/sharedAssignmentDetails",
                    },
                  no_submission:
                    {
                      example: 123,
                      type: integer,
                      description: The number of students who have been assigned but haven't submitted the assignment yet,
                      format: uint32,
                    },
                  need_grading:
                    {
                      example: 123,
                      type: integer,
                      description: The number of students who needs to be graded,
                      format: uint32,
                    },
                  graded:
                    {
                      example: 123,
                      type: integer,
                      description: The number of student who have been graded,
                      format: uint32,
                    },
                  submitted_on_time:
                    {
                      example: 123,
                      type: integer,
                      description: The number of students who submit their assignments on time,
                      format: uint32,
                    },
                  submitted_late:
                    {
                      example: 123,
                      type: integer,
                      description: The number of students who submit their assignments late,
                      format: uint32,
                    },
                  teacher_user_id:
                    {
                      example: 123,
                      type: string,
                      description: Teacher User ID,
                    },
                  class_subject_id:
                    {
                      example: 123,
                      type: string,
                      description: Class Subject ID,
                    },
                  created_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when assignment statistic is created,
                      format: date-time,
                    },
                  updated_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when assignment statistic is updated,
                      format: date-time,
                    },
                },
            },
          sharedListAssignmentSubmission:
            {
              type: object,
              properties:
                {
                  id:
                    {
                      example: 123,
                      type: string,
                      description: Assignment submission ID,
                    },
                  assignment:
                    {
                      $ref: "#/components/schemas/sharedAssignmentDetails",
                    },
                  student_user_id:
                    {
                      example: 123,
                      type: string,
                      description: Student User ID,
                    },
                  answer_text:
                    { example: 123, type: string, description: Student ID },
                  attachment_files:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/v1AttachmentFile",
                        },
                      description: Attachment files,
                    },
                  point:
                    {
                      example: 100.0,
                      type: number,
                      description: The points earned by students on scale of 0 to 100,
                      format: float,
                    },
                  RubricSubmission:
                    {
                      $ref: "#/components/schemas/sharedRubricSubmission",
                    },
                  submission_state:
                    {
                      example: NEED_GRADING,
                      enum:
                        [
                          UNKNOWN_SUBMISSON,
                          NO_SUBMISSION,
                          NEED_GRADING,
                          GRADED,
                        ],
                      type: string,
                      description: Assignment submission state,
                      format: enum,
                    },
                  class_subject_id:
                    {
                      example: 123,
                      type: string,
                      description: "Class Subject ID, assignment submission will be attached to specific class",
                    },
                  teaching_module_folder_id:
                    {
                      example: 123,
                      type: string,
                      description: Teaching Module Folder ID,
                    },
                  created_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when assignment submission is created,
                      format: date-time,
                    },
                  updated_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when assignment submission is updated,
                      format: date-time,
                    },
                },
            },
          v1CursorPagination:
            {
              type: object,
              properties:
                {
                  limit: { type: integer, format: uint32 },
                  next_cursor: { type: string },
                  prev_cursor: { type: string },
                  curr_cursor: { type: string },
                },
            },
          v1OffsetPagination:
            {
              type: object,
              properties:
                {
                  limit: { type: integer, format: uint32 },
                  offset: { type: integer, format: uint32 },
                  total: { type: integer, format: uint32 },
                },
            },
          v1ResponseMetadata:
            {
              type: object,
              properties:
                {
                  offset_pagination:
                    { $ref: "#/components/schemas/v1OffsetPagination" },
                  cursor_pagination:
                    { $ref: "#/components/schemas/v1CursorPagination" },
                },
            },
          publicAnswer:
            {
              type: object,
              properties:
                {
                  question_id:
                    { example: 123, type: string, description: Question ID },
                  answer:
                    { example: 7, type: string, description: question answer },
                  options:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedQuizOption",
                        },
                    },
                },
            },
          publicCreateQuestionRequest:
            {
              type: object,
              properties:
                {
                  questions:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedQuizQuestion",
                        },
                    },
                },
            },
          publicCreateQuestionResponse:
            { type: object, properties: { message: { type: string } } },
          publicCreateQuizRequest:
            {
              type: object,
              properties:
                {
                  title:
                    {
                      example: Quiz Barisan & Deret Aritmatika,
                      type: string,
                      description: Quiz Title,
                    },
                  description:
                    {
                      example: Peserta didik akan dinilai kemampuan & pemahaman terhadap materi Barisan & Deret Aritmatika,
                      type: string,
                      description: Description,
                    },
                  info:
                    {
                      example: "Silahkan menjawab pertanyaan yang telah disediakan, berdoa terlebih dahulu",
                      type: string,
                      description: Instruction & Resource for Student,
                    },
                  learing_goal_id:
                    {
                      example: 12312r12f23r,
                      type: string,
                      description: Learing goal ID,
                    },
                  learning_goal_title:
                    {
                      example: Menentukan suku ke-n barisan aritmatika dan jumlah suku ke-n deret aritmatika,
                      type: string,
                      description: Learing goal title,
                    },
                  class_subject_id:
                    {
                      example: 12312r12f23r,
                      type: string,
                      description: "Class Subject ID, quiz will be attached to specific class",
                    },
                  subject_id:
                    {
                      example: 12312r12f23r,
                      type: string,
                      description: "Subject ID, quiz will be attached to all class that enrolled this subject",
                    },
                  subject_name:
                    { example: MATH, type: string, description: Subject Name },
                  instance_id: { type: string, description: Instance ID },
                  teaching_module_id:
                    {
                      example: 123,
                      type: string,
                      description: Teaching Module ID,
                    },
                  teaching_module_folder_id:
                    {
                      example: 123,
                      type: string,
                      description: Teaching Module Folder ID,
                    },
                  exam_id: { example: 123, type: string, description: Exam ID },
                },
            },
          publicCreateQuizResponse:
            {
              type: object,
              properties:
                {
                  message: { type: string },
                  quiz:
                    {
                      $ref: "#/components/schemas/sharedQuiz",
                    },
                },
            },
          publicCreateQuizSettingRequest:
            {
              type: object,
              properties:
                {
                  quiz_id: { example: 123, type: string, description: Quiz },
                  assessmentType:
                    {
                      example: SUMMATIVE,
                      enum: [ASSESSMENT_EMPTY, FORMATIVE, SUMMATIVE, EXAM],
                      type: string,
                      description: Assessment Type,
                      format: enum,
                    },
                  category:
                    {
                      example: PRACTICE_QUIZ,
                      enum:
                        [
                          ASSESSMENT_CATEGORY_EMPTY,
                          PRACTICE_QUIZ,
                          QUIZ,
                          HOMEWORK,
                        ],
                      type: string,
                      description: Assessment Quiz Category,
                      format: enum,
                    },
                  timeLimit:
                    {
                      example: 60,
                      type: integer,
                      description: Quiz time limit,
                      format: int32,
                    },
                  randomArrangement:
                    {
                      example: true,
                      type: boolean,
                      description: Randomize the questions,
                    },
                  resultView:
                    {
                      example: true,
                      type: boolean,
                      description: Viewing the result,
                    },
                  indexMinimum:
                    {
                      example: 75,
                      type: integer,
                      description: minimum grade index,
                      format: int32,
                    },
                  due_date:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Quiz deadline,
                    },
                  until_date:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Quiz until date,
                    },
                  assignee:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/publicQuizAssignee",
                        },
                    },
                  folder_id: { type: string },
                },
            },
          publicCreateQuizSettingResponse:
            {
              type: object,
              properties:
                {
                  message: { type: string },
                  setting:
                    {
                      $ref: "#/components/schemas/sharedQuizSettings",
                    },
                },
            },
          publicEditQuestionsRequest:
            {
              type: object,
              properties:
                {
                  quiz_id: { type: string },
                  questions:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedQuizQuestion",
                        },
                    },
                },
            },
          publicEditQuestionsResponse:
            { type: object, properties: { message: { type: string } } },
          publicGetBulkQuizSubmissionByStudentIdResponse:
            {
              type: object,
              properties:
                {
                  quiz_submissions:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedQuizSubmission",
                        },
                      description: Quiz submission details,
                    },
                },
            },
          publicGetQuestionListResponse:
            {
              type: object,
              properties:
                {
                  questions:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedQuizQuestion",
                        },
                    },
                },
            },
          publicGetQuizDetailResponse:
            {
              type: object,
              properties:
                {
                  quiz:
                    {
                      $ref: "#/components/schemas/sharedQuiz",
                    },
                  setting:
                    {
                      $ref: "#/components/schemas/sharedQuizSettings",
                    },
                  questions:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedQuizQuestion",
                        },
                    },
                },
            },
          publicGetQuizListResponse:
            {
              type: object,
              properties:
                {
                  quiz:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/publicGetQuizListResponseQuiz",
                        },
                    },
                  meta:
                    { $ref: "#/components/schemas/v1ResponseMetadata" },
                },
            },
          publicGetQuizListResponseQuiz:
            {
              type: object,
              properties:
                {
                  id: { example: 123, type: string, description: Quiz ID },
                  title:
                    {
                      example: Quiz Barisan & Deret Aritmatika,
                      type: string,
                      description: Quiz Title,
                    },
                  description:
                    {
                      example: Peserta didik akan dinilai kemampuan & pemahaman terhadap materi Barisan & Deret Aritmatika,
                      type: string,
                      description: Description,
                    },
                  info:
                    {
                      example: "Silahkan menjawab pertanyaan yang telah disediakan, berdoa terlebih dahulu",
                      type: string,
                      description: Instruction & Resource for Student,
                    },
                  class_subject_id:
                    {
                      example: 12312r12f23r,
                      type: string,
                      description: "Class Subject ID, quiz will be attached to specific class",
                    },
                  subject_id:
                    {
                      example: 12312r12f23r,
                      type: string,
                      description: "Subject ID, quiz will be attached to all class that enrolled this subject",
                    },
                  subject_name:
                    { example: MATH, type: string, description: Subject Name },
                  learing_goal_id:
                    {
                      example: 12312r12f23r,
                      type: string,
                      description: Learing goal ID,
                    },
                  learning_goal_title:
                    {
                      example: Menentukan suku ke-n barisan aritmatika dan jumlah suku ke-n deret aritmatika,
                      type: string,
                      description: Learing goal title,
                    },
                  instance_id: { type: string, description: Instance ID },
                  teaching_module_id:
                    {
                      example: 123,
                      type: string,
                      description: Teaching Module ID,
                    },
                  teaching_module_folder_id:
                    {
                      example: 123,
                      type: string,
                      description: Teaching Module Folder ID,
                    },
                  exam_id: { example: 123, type: string, description: Exam ID },
                  settings:
                    {
                      $ref: "#/components/schemas/sharedQuizSettings",
                    },
                  total_submission:
                    {
                      type: integer,
                      description: Total submission,
                      format: uint32,
                    },
                  total_graded:
                    {
                      type: integer,
                      description: Total graded,
                      format: uint32,
                    },
                  total_un_graded:
                    {
                      type: integer,
                      description: Total ungraded,
                      format: uint32,
                    },
                  total_no_submission:
                    {
                      type: integer,
                      description: Total no submission,
                      format: uint32,
                    },
                  created_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when Curriculum is created,
                      format: date-time,
                    },
                  updated_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when Curriculum data updated,
                      format: date-time,
                    },
                },
            },
          publicGetQuizStatisticsResponse:
            {
              type: object,
              properties:
                {
                  statistics:
                    {
                      $ref: "#/components/schemas/sharedQuizStatistics",
                    },
                },
            },
          publicGetQuizSubmissionByStudentIdResponse:
            {
              type: object,
              properties:
                {
                  quiz_submission:
                    {
                      $ref: "#/components/schemas/sharedQuizSubmission",
                    },
                },
            },
          publicGetQuizSubmissionListResponse:
            {
              type: object,
              properties:
                {
                  quiz_submission_list:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedQuizSubmissionResult",
                        },
                    },
                  meta:
                    { $ref: "#/components/schemas/v1ResponseMetadata" },
                },
            },
          publicGetStudentAnswerResponse:
            {
              type: object,
              properties:
                {
                  answers:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedStudentAnswer",
                        },
                    },
                },
            },
          publicGetStudentSubmissionDetailsResponse:
            {
              type: object,
              properties:
                {
                  submission_info:
                    {
                      $ref: "#/components/schemas/sharedQuizSubmission",
                    },
                  answers:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedStudentAnswer",
                        },
                    },
                },
            },
          publicGetStudentSubmissionsResponse:
            {
              type: object,
              properties:
                {
                  submissions:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedStudentSubmissions",
                        },
                    },
                },
            },
          publicManualGradingSubmissionRequest:
            {
              type: object,
              properties:
                {
                  body:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/publicManualGradingSubmissionRequestBody",
                        },
                    },
                  quiz_id: { type: string },
                  nisn: { type: string },
                },
            },
          publicManualGradingSubmissionRequestBody:
            {
              type: object,
              properties:
                { score: { type: string }, answer_id: { type: string } },
            },
          publicManualGradingSubmissionResponse:
            { type: object, properties: { message: { type: string } } },
          publicQuizAssignee:
            {
              type: object,
              properties:
                {
                  student_id: { type: string },
                  student_name: { type: string },
                },
            },
          publicSubmitStudentAnswerRequest:
            {
              type: object,
              properties:
                {
                  quiz_id: { type: string },
                  student_id: { type: string },
                  student_name: { type: string },
                  submission_start_time: { type: string },
                  subission_end_time: { type: string },
                  answer:
                    {
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/publicAnswer",
                        },
                    },
                },
            },
          publicSubmitStudentAnswerResponse:
            { type: object, properties: { message: { type: string } } },
          publicUpdateQuizRequest:
            {
              type: object,
              properties:
                {
                  id: { example: 123, type: string, description: Quiz ID },
                  title:
                    {
                      example: Quiz Barisan & Deret Aritmatika,
                      type: string,
                      description: Quiz Title,
                    },
                  description:
                    {
                      example: Peserta didik akan dinilai kemampuan & pemahaman terhadap materi Barisan & Deret Aritmatika,
                      type: string,
                      description: Description,
                    },
                  info:
                    {
                      example: "Silahkan menjawab pertanyaan yang telah disediakan, berdoa terlebih dahulu",
                      type: string,
                      description: Instruction & Resource for Student,
                    },
                  learing_goal_id:
                    {
                      example: 12312r12f23r,
                      type: string,
                      description: Learing goal ID,
                    },
                  learning_goal_title:
                    {
                      example: Menentukan suku ke-n barisan aritmatika dan jumlah suku ke-n deret aritmatika,
                      type: string,
                      description: Learing goal title,
                    },
                },
            },
          publicUpdateQuizResponse:
            {
              type: object,
              properties:
                {
                  message: { type: string },
                  quiz:
                    {
                      $ref: "#/components/schemas/sharedQuiz",
                    },
                },
            },
          publicUpdateQuizSettingRequest:
            {
              type: object,
              properties:
                {
                  id: { example: 123, type: string, description: Setting ID },
                  quiz_id: { example: 123, type: string, description: Quiz },
                  assessmentType:
                    {
                      example: SUMMATIVE,
                      enum: [ASSESSMENT_EMPTY, FORMATIVE, SUMMATIVE, EXAM],
                      type: string,
                      description: Assessment Type,
                      format: enum,
                    },
                  category:
                    {
                      example: PRACTICE_QUIZ,
                      enum:
                        [
                          ASSESSMENT_CATEGORY_EMPTY,
                          PRACTICE_QUIZ,
                          QUIZ,
                          HOMEWORK,
                        ],
                      type: string,
                      description: Assessment Quiz Category,
                      format: enum,
                    },
                  timeLimit:
                    {
                      example: 60,
                      type: integer,
                      description: Quiz time limit,
                      format: int32,
                    },
                  randomArrangement:
                    {
                      example: true,
                      type: boolean,
                      description: Randomize the questions,
                    },
                  resultView:
                    {
                      example: true,
                      type: boolean,
                      description: Viewing the result,
                    },
                  indexMinimum:
                    {
                      example: 75,
                      type: integer,
                      description: minimum grade index,
                      format: int32,
                    },
                  due_date:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Quiz deadline,
                    },
                  until_date:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Quiz until date,
                    },
                },
            },
          publicUpdateQuizSettingResponse:
            {
              type: object,
              properties:
                {
                  message: { type: string },
                  setting:
                    {
                      $ref: "#/components/schemas/sharedQuizSettings",
                    },
                },
            },
          sharedQuiz:
            {
              type: object,
              properties:
                {
                  id: { example: 123, type: string, description: Quiz ID },
                  title:
                    {
                      example: Quiz Barisan & Deret Aritmatika,
                      type: string,
                      description: Quiz Title,
                    },
                  description:
                    {
                      example: Peserta didik akan dinilai kemampuan & pemahaman terhadap materi Barisan & Deret Aritmatika,
                      type: string,
                      description: Description,
                    },
                  info:
                    {
                      example: "Silahkan menjawab pertanyaan yang telah disediakan, berdoa terlebih dahulu",
                      type: string,
                      description: Instruction & Resource for Student,
                    },
                  class_subject_id:
                    {
                      example: 12312r12f23r,
                      type: string,
                      description: "Class Subject ID, quiz will be attached to specific class",
                    },
                  subject_id:
                    {
                      example: 12312r12f23r,
                      type: string,
                      description: "Subject ID, quiz will be attached to all class that enrolled this subject",
                    },
                  subject_name:
                    { example: MATH, type: string, description: Subject Name },
                  learing_goal_id:
                    {
                      example: 12312r12f23r,
                      type: string,
                      description: Learing goal ID,
                    },
                  learning_goal_title:
                    {
                      example: Menentukan suku ke-n barisan aritmatika dan jumlah suku ke-n deret aritmatika,
                      type: string,
                      description: Learing goal title,
                    },
                  instance_id: { type: string, description: Instance ID },
                  teaching_module_id:
                    {
                      example: 123,
                      type: string,
                      description: Teaching Module ID,
                    },
                  teaching_module_folder_id:
                    {
                      example: 123,
                      type: string,
                      description: Teaching Module Folder ID,
                    },
                  exam_id: { example: 123, type: string, description: Exam ID },
                  created_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when Curriculum is created,
                      format: date-time,
                    },
                  updated_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when Curriculum data updated,
                      format: date-time,
                    },
                },
            },
          sharedQuizOption:
            {
              type: object,
              properties:
                {
                  id: { type: string },
                  text: { type: string },
                  value: { type: string },
                  isAnswer: { type: boolean },
                  priority: { type: string },
                },
            },
          sharedQuizQuestion:
            {
              type: object,
              properties:
                {
                  id: { example: 123, type: string, description: Question ID },
                  quiz_id: { example: 123, type: string, description: Quiz ID },
                  question:
                    {
                      example: Choose the correct answer,
                      type: string,
                      description: Question,
                    },
                  questionType:
                    {
                      example: MULIPLE_ANSWER,
                      enum:
                        [
                          ASSESSMENT_QUIZ_EMPTY,
                          TEXT,
                          ESSAY,
                          MULTIPLE_ANSWER,
                          SINGLE_ANSWER,
                          FILE_UPLOAD,
                          NUMERIC,
                          TRUE_FALSE,
                          SORTING,
                          MATCHING,
                          MULTIPLE_PARTIAL_ANSWER,
                        ],
                      type: string,
                      description: question type,
                      format: enum,
                    },
                  points:
                    {
                      example: 5,
                      type: integer,
                      description: question points,
                      format: int32,
                    },
                  options:
                    {
                      example: 5,
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedQuizOption",
                        },
                      description: question option answer,
                    },
                  answer:
                    { example: 7, type: string, description: question answer },
                },
            },
          sharedQuizSettings:
            {
              type: object,
              properties:
                {
                  id: { example: 123, type: string, description: Setting ID },
                  quiz_id: { example: 123, type: string, description: Quiz },
                  assessmentType:
                    {
                      example: SUMMATIVE,
                      enum: [ASSESSMENT_EMPTY, FORMATIVE, SUMMATIVE, EXAM],
                      type: string,
                      description: Assessment Type,
                      format: enum,
                    },
                  category:
                    {
                      example: PRACTICE_QUIZ,
                      enum:
                        [
                          ASSESSMENT_CATEGORY_EMPTY,
                          PRACTICE_QUIZ,
                          QUIZ,
                          HOMEWORK,
                        ],
                      type: string,
                      description: Assessment Quiz Category,
                      format: enum,
                    },
                  timeLimit:
                    {
                      example: 60,
                      type: integer,
                      description: Quiz time limit,
                      format: int32,
                    },
                  randomArrangement:
                    {
                      example: true,
                      type: boolean,
                      description: Randomize the questions,
                    },
                  resultView:
                    {
                      example: true,
                      type: boolean,
                      description: Viewing the result,
                    },
                  indexMinimum:
                    {
                      example: 75,
                      type: integer,
                      description: minimum grade index,
                      format: int32,
                    },
                  due_date:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Quiz deadline,
                      format: date-time,
                    },
                  until_date:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Quiz until date,
                      format: date-time,
                    },
                  created_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when quiz is created,
                      format: date-time,
                    },
                  updated_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when quiz data updated,
                      format: date-time,
                    },
                },
            },
          sharedQuizStatistics:
            {
              type: object,
              properties:
                {
                  total_submission:
                    {
                      example: 100,
                      type: string,
                      description: Total submission,
                    },
                  total_graded:
                    { example: 80, type: string, description: Total graded },
                  total_ungraded:
                    { example: 20, type: string, description: Total ungraded },
                  total_no_submission:
                    {
                      example: 10,
                      type: string,
                      description: Total no submission,
                    },
                  average_score:
                    { example: 75, type: string, description: Average score },
                  average_time_spent:
                    {
                      example: 30,
                      type: string,
                      description: Average time spent,
                    },
                  average_points:
                    { example: 80, type: string, description: Average points },
                  quiz_id: { example: 123, type: string, description: Quiz ID },
                  class_subject_id:
                    {
                      example: 123,
                      type: string,
                      description: Class Subject ID,
                    },
                  subject_id:
                    { example: 123, type: string, description: Subject ID },
                },
            },
          sharedQuizSubmission:
            {
              type: object,
              properties:
                {
                  id:
                    {
                      example: 123,
                      type: string,
                      description: Quiz submission ID,
                    },
                  quiz_id: { example: 123, type: string, description: Quiz ID },
                  class_subject_id:
                    {
                      example: 12312r12f23r,
                      type: string,
                      description: "Class Subject ID, quiz will be attached to specific class",
                    },
                  subject_id:
                    {
                      example: 12312r12f23r,
                      type: string,
                      description: "Subject ID, quiz will be attached to all class that enrolled this subject",
                    },
                  student_id:
                    { example: 123, type: string, description: Student ID },
                  student_name:
                    {
                      example: John Doe,
                      type: string,
                      description: Student Name,
                    },
                  attempt:
                    {
                      example: 1,
                      type: integer,
                      description: Number of quiz submission attempt,
                      format: int32,
                    },
                  time_spent:
                    {
                      example: 60,
                      type: integer,
                      description: Quiz time spent,
                      format: int32,
                    },
                  score:
                    {
                      example: 100.0,
                      type: number,
                      description: The score earned by students on scale of 0 to 100,
                      format: float,
                    },
                  points:
                    {
                      example: 100,
                      type: integer,
                      description: The total point from students answer,
                      format: int32,
                    },
                  state:
                    {
                      example: NEED_GRADING,
                      enum:
                        [
                          UNKNOWN_SUBMISSON,
                          NO_SUBMISSION,
                          NEED_GRADING,
                          GRADED,
                        ],
                      type: string,
                      description: Quiz submission state,
                      format: enum,
                    },
                  due_date:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: due date,
                      format: date-time,
                    },
                  created_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when quiz submission is created,
                      format: date-time,
                    },
                  updated_at:
                    {
                      example: "2020-01-01T00:00:00Z",
                      type: string,
                      description: Time when quiz submission is updated,
                      format: date-time,
                    },
                },
            },
          sharedQuizSubmissionResult:
            {
              type: object,
              properties:
                {
                  student_id:
                    { example: 123, type: string, description: Student ID },
                  student_name:
                    {
                      example: John Doe,
                      type: string,
                      description: Student Name,
                    },
                  total_score:
                    { example: 100, type: string, description: Total score },
                  correct_answer:
                    { example: 100, type: string, description: Correct answer },
                  duration:
                    { example: 100, type: string, description: Duration },
                  state:
                    {
                      example: NEED_GRADING,
                      enum:
                        [
                          UNKNOWN_SUBMISSON,
                          NO_SUBMISSION,
                          NEED_GRADING,
                          GRADED,
                        ],
                      type: string,
                      description: Quiz submission state,
                      format: enum,
                    },
                },
            },
          sharedStudentAnswer:
            {
              type: object,
              properties:
                {
                  id: { example: 123, type: string, description: Question ID },
                  quiz_id: { example: 123, type: string, description: Quiz ID },
                  question_id:
                    { example: 123, type: string, description: Question ID },
                  student_id:
                    { example: 123, type: string, description: Student ID },
                  student_name:
                    { example: John, type: string, description: Student Name },
                  answer:
                    { example: 7, type: string, description: question answer },
                  points: { example: 7, type: string, description: points },
                  options:
                    {
                      example: 5,
                      type: array,
                      items:
                        {
                          $ref: "#/components/schemas/sharedQuizOption",
                        },
                      description: student answer option,
                    },
                  score_state:
                    {
                      enum: [UNKNOWN, NOT_SCORED, SCORED],
                      type: string,
                      format: enum,
                    },
                },
            },
          sharedStudentSubmissions:
            {
              type: object,
              properties:
                {
                  quiz_name:
                    {
                      example: Aljabar 101,
                      type: string,
                      description: Quiz Name,
                    },
                  learning_goal:
                    {
                      example: understanding aljabar,
                      type: string,
                      description: Learning goal,
                    },
                  due_date:
                    {
                      example: understanding aljabar,
                      type: string,
                      description: Learning goal,
                    },
                  state:
                    {
                      example: NEED_GRADING,
                      enum:
                        [
                          UNKNOWN_SUBMISSON,
                          NO_SUBMISSION,
                          NEED_GRADING,
                          GRADED,
                        ],
                      type: string,
                      description: Quiz submission state,
                      format: enum,
                    },
                  category:
                    {
                      example: PRACTICE_QUIZ,
                      enum:
                        [
                          ASSESSMENT_CATEGORY_EMPTY,
                          PRACTICE_QUIZ,
                          QUIZ,
                          HOMEWORK,
                        ],
                      type: string,
                      description: Assessment Quiz Category,
                      format: enum,
                    },
                  score:
                    {
                      example: 100.0,
                      type: number,
                      description: The score earned by students on scale of 0 to 100,
                      format: float,
                    },
                  points:
                    {
                      example: 100,
                      type: integer,
                      description: The total point from students answer,
                      format: int32,
                    },
                  quiz_id:
                    { example: 123456, type: string, description: Quiz ID },
                  submission_id:
                    {
                      example: 65324314,
                      type: string,
                      description: Submission ID,
                    },
                  class_subject_id:
                    {
                      example: 862435235,
                      type: string,
                      description: Class subject ID,
                    },
                  subject_id:
                    {
                      example: 12312r12f23r,
                      type: string,
                      description: Subject ID,
                    },
                  subject_name:
                    { example: MATH, type: string, description: Subject Name },
                  student_id:
                    { example: 123, type: string, description: Student ID },
                  student_name:
                    {
                      example: John Doe,
                      type: string,
                      description: Student Name,
                    },
                },
            },
        },
      responses:
        {
          "500":
            {
              description: Internal Server Error,
              content:
                {
                  application/json:
                    {
                      schema:
                        {
                          $ref: "#/components/schemas/v1ErrorResponse",
                        },
                    },
                },
            },
          "401":
            {
              description: Unauthorized JWT token.,
              content:
                {
                  application/json:
                    {
                      schema:
                        {
                          $ref: "#/components/schemas/v1ErrorResponse",
                        },
                    },
                },
            },
        },
      securitySchemes:
        { OAuth2: { type: http, scheme: bearer, bearerFormat: JWT } },
    },
  security: [{ OAuth2: [TEACHERSTUDENT] }],
}
