name: Deploy Swagger Documentation for Tags

on:
  push:
    tags:
      - '*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to deploy'
        required: true
        type: string

jobs:
  deploy-tag-docs:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
      - name: Checkout tag
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tag || github.ref }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Get tag name
        id: tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag_name=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Copy OpenAPI files to swagger-ui directory
        run: |
          # Create a temporary directory for OpenAPI files
          mkdir -p swagger-ui/openapi-files

          # Copy all OpenAPI files from the modules directory
          find openapi/modules -name "*.yaml" -o -name "*.yml" | while read file; do
            # Get the filename without path
            filename=$(basename "$file")
            # Copy to swagger-ui directory with a flattened name
            cp "$file" "swagger-ui/openapi-files/$filename"
          done

      - name: Generate swagger initializer for this tag
        run: |
          cat > generate-tag-swagger-initializer.js << 'EOF'
          const fs = require('fs');
          const path = require('path');

          // Get tag name from environment
          const tagName = process.env.TAG_NAME || 'main';

          // Base URL for this specific tag
          const baseUrl = `https://nujitu.github.io/openapi-doc/${tagName}/openapi-files/`;

          // Directory containing OpenAPI files
          const openapiDir = path.join(__dirname, 'swagger-ui/openapi-files');

          // Function to get OpenAPI files
          function getOpenAPIFiles(dir) {
            const files = fs.readdirSync(dir);
            return files
              .filter(file => file.endsWith('.yaml') || file.endsWith('.yml'))
              .map(file => path.join(dir, file));
          }

          // Create URLs for the Swagger UI configuration
          function createSwaggerUrls(fileList) {
            return fileList.map((file) => {
              const filename = path.basename(file);
              const urlPath = `${baseUrl}${filename}`;
              const name = path.basename(file, path.extname(file));
              return { 
                url: urlPath, 
                name: name.replace('-domain.openapi', '').replace('.domain.openapi', '') 
              };
            });
          }

          // Generate the swagger-initializer.js file
          function generateSwaggerInitializer(urls) {
            const initializerTemplate = `
          window.onload = function() {
            // Add version info to the page
            const versionInfo = document.createElement('div');
            versionInfo.innerHTML = '<h3>Version: ${tagName}</h3><a href="../">‚Üê Back to version selector</a>';
            versionInfo.style.cssText = 'padding: 10px; background: #f5f5f5; border-bottom: 1px solid #ddd; text-align: center;';
            document.body.insertBefore(versionInfo, document.getElementById('swagger-ui'));
            
            const ui = SwaggerUIBundle({
              urls: ${JSON.stringify(urls, null, 2)},
              dom_id: '#swagger-ui',
              deepLinking: true,
              presets: [
                SwaggerUIBundle.presets.apis,
                SwaggerUIStandalonePreset
              ],
              layout: "StandaloneLayout"
            });
            window.ui = ui;
          };
            `;

            const outputPath = path.join(__dirname, 'swagger-ui/swagger-initializer.js');
            fs.writeFileSync(outputPath, initializerTemplate, 'utf8');
            console.log('swagger-initializer.js file has been generated for tag:', tagName);
          }

          // Main logic
          const openapiFiles = getOpenAPIFiles(openapiDir);
          const swaggerUrls = createSwaggerUrls(openapiFiles);
          generateSwaggerInitializer(swaggerUrls);
          EOF

          TAG_NAME=${{ steps.tag.outputs.tag_name }} node generate-tag-swagger-initializer.js

      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages-content
          fetch-depth: 0

      - name: Create tag directory and copy files
        run: |
          TAG_NAME=${{ steps.tag.outputs.tag_name }}

          # Create directory for this tag
          mkdir -p "gh-pages-content/$TAG_NAME"

          # Copy swagger-ui files to the tag directory
          cp -r swagger-ui/* "gh-pages-content/$TAG_NAME/"

          # Update the versions list
          cd gh-pages-content

          # Create or update versions.json
          if [ ! -f versions.json ]; then
            echo '[]' > versions.json
          fi

          # Add this version to the list if it doesn't exist
          node -e "
            const fs = require('fs');
            const versions = JSON.parse(fs.readFileSync('versions.json', 'utf8'));
            const newVersion = '$TAG_NAME';
            if (!versions.find(v => v.tag === newVersion)) {
              versions.push({
                tag: newVersion,
                name: newVersion,
                date: new Date().toISOString()
              });
              versions.sort((a, b) => b.tag.localeCompare(a.tag, undefined, { numeric: true, sensitivity: 'base' }));
              fs.writeFileSync('versions.json', JSON.stringify(versions, null, 2));
              console.log('Added version:', newVersion);
            }
          "

      - name: Commit and push to gh-pages
        run: |
          cd gh-pages-content
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Deploy documentation for tag ${{ steps.tag.outputs.tag_name }}" || exit 0
          git push origin gh-pages
